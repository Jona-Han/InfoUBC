{"/Users/han/code/cpsc310/c1/project_team123/src/controller/IInsightFacade.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":267,"6":267,"7":1,"8":3,"9":3,"10":1,"11":3,"12":3,"13":1},"f":{"0":1,"1":267,"2":3,"3":3},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/controller/IInsightFacade.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f52e7bf78fe123a58678c38d0b1a21ae92e510d9","contentHash":"8faf77fe805cab897ed0452a355789353e433a430ad57e278ed04129ae3ff7f8"},"/Users/han/code/cpsc310/c1/project_team123/src/controller/InsightFacade.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":65}},"5":{"start":{"line":8,"column":16},"end":{"line":8,"column":59}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":55}},"7":{"start":{"line":10,"column":16},"end":{"line":10,"column":49}},"8":{"start":{"line":11,"column":25},"end":{"line":11,"column":77}},"9":{"start":{"line":12,"column":16},"end":{"line":12,"column":42}},"10":{"start":{"line":13,"column":17},"end":{"line":13,"column":34}},"11":{"start":{"line":14,"column":19},"end":{"line":14,"column":27}},"12":{"start":{"line":18,"column":8},"end":{"line":18,"column":43}},"13":{"start":{"line":19,"column":8},"end":{"line":19,"column":26}},"14":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"15":{"start":{"line":23,"column":12},"end":{"line":23,"column":83}},"16":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"17":{"start":{"line":26,"column":12},"end":{"line":26,"column":102}},"18":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"19":{"start":{"line":29,"column":12},"end":{"line":29,"column":55}},"20":{"start":{"line":31,"column":8},"end":{"line":31,"column":49}},"21":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"22":{"start":{"line":35,"column":12},"end":{"line":35,"column":83}},"23":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"24":{"start":{"line":38,"column":12},"end":{"line":38,"column":99}},"25":{"start":{"line":40,"column":8},"end":{"line":47,"column":9}},"26":{"start":{"line":41,"column":12},"end":{"line":41,"column":77}},"27":{"start":{"line":42,"column":12},"end":{"line":42,"column":50}},"28":{"start":{"line":43,"column":12},"end":{"line":43,"column":39}},"29":{"start":{"line":46,"column":12},"end":{"line":46,"column":95}},"30":{"start":{"line":50,"column":8},"end":{"line":68,"column":11}},"31":{"start":{"line":51,"column":26},"end":{"line":51,"column":28}},"32":{"start":{"line":52,"column":21},"end":{"line":52,"column":51}},"33":{"start":{"line":53,"column":12},"end":{"line":67,"column":13}},"34":{"start":{"line":54,"column":16},"end":{"line":56,"column":17}},"35":{"start":{"line":55,"column":20},"end":{"line":55,"column":81}},"36":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"37":{"start":{"line":58,"column":20},"end":{"line":58,"column":87}},"38":{"start":{"line":60,"column":16},"end":{"line":60,"column":40}},"39":{"start":{"line":61,"column":34},"end":{"line":61,"column":58}},"40":{"start":{"line":62,"column":16},"end":{"line":62,"column":48}},"41":{"start":{"line":63,"column":16},"end":{"line":63,"column":33}},"42":{"start":{"line":66,"column":16},"end":{"line":66,"column":30}},"43":{"start":{"line":71,"column":8},"end":{"line":79,"column":11}},"44":{"start":{"line":72,"column":25},"end":{"line":72,"column":27}},"45":{"start":{"line":73,"column":12},"end":{"line":77,"column":13}},"46":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"47":{"start":{"line":75,"column":20},"end":{"line":75,"column":41}},"48":{"start":{"line":78,"column":12},"end":{"line":78,"column":28}},"49":{"start":{"line":82,"column":8},"end":{"line":97,"column":9}},"50":{"start":{"line":83,"column":12},"end":{"line":83,"column":57}},"51":{"start":{"line":84,"column":24},"end":{"line":84,"column":66}},"52":{"start":{"line":85,"column":12},"end":{"line":93,"column":13}},"53":{"start":{"line":86,"column":29},"end":{"line":86,"column":85}},"54":{"start":{"line":87,"column":27},"end":{"line":91,"column":17}},"55":{"start":{"line":92,"column":16},"end":{"line":92,"column":60}},"56":{"start":{"line":96,"column":12},"end":{"line":96,"column":60}},"57":{"start":{"line":100,"column":25},"end":{"line":100,"column":29}},"58":{"start":{"line":101,"column":8},"end":{"line":108,"column":9}},"59":{"start":{"line":102,"column":12},"end":{"line":107,"column":13}},"60":{"start":{"line":103,"column":16},"end":{"line":103,"column":28}},"61":{"start":{"line":105,"column":17},"end":{"line":107,"column":13}},"62":{"start":{"line":106,"column":16},"end":{"line":106,"column":35}},"63":{"start":{"line":109,"column":8},"end":{"line":109,"column":26}},"64":{"start":{"line":112,"column":8},"end":{"line":151,"column":9}},"65":{"start":{"line":113,"column":26},"end":{"line":113,"column":52}},"66":{"start":{"line":114,"column":33},"end":{"line":114,"column":63}},"67":{"start":{"line":115,"column":24},"end":{"line":115,"column":45}},"68":{"start":{"line":116,"column":12},"end":{"line":116,"column":46}},"69":{"start":{"line":117,"column":26},"end":{"line":117,"column":35}},"70":{"start":{"line":118,"column":29},"end":{"line":118,"column":31}},"71":{"start":{"line":119,"column":12},"end":{"line":141,"column":13}},"72":{"start":{"line":120,"column":16},"end":{"line":140,"column":17}},"73":{"start":{"line":122,"column":20},"end":{"line":137,"column":21}},"74":{"start":{"line":123,"column":35},"end":{"line":123,"column":54}},"75":{"start":{"line":124,"column":24},"end":{"line":136,"column":25}},"76":{"start":{"line":125,"column":28},"end":{"line":134,"column":31}},"77":{"start":{"line":128,"column":45},"end":{"line":128,"column":68}},"78":{"start":{"line":129,"column":45},"end":{"line":129,"column":61}},"79":{"start":{"line":130,"column":32},"end":{"line":130,"column":60}},"80":{"start":{"line":133,"column":32},"end":{"line":133,"column":57}},"81":{"start":{"line":135,"column":28},"end":{"line":135,"column":54}},"82":{"start":{"line":142,"column":12},"end":{"line":142,"column":40}},"83":{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},"84":{"start":{"line":144,"column":16},"end":{"line":144,"column":77}},"85":{"start":{"line":146,"column":12},"end":{"line":146,"column":97}},"86":{"start":{"line":147,"column":12},"end":{"line":147,"column":94}},"87":{"start":{"line":150,"column":12},"end":{"line":150,"column":83}},"88":{"start":{"line":154,"column":8},"end":{"line":199,"column":9}},"89":{"start":{"line":155,"column":33},"end":{"line":155,"column":63}},"90":{"start":{"line":156,"column":24},"end":{"line":156,"column":45}},"91":{"start":{"line":157,"column":12},"end":{"line":157,"column":46}},"92":{"start":{"line":158,"column":24},"end":{"line":158,"column":46}},"93":{"start":{"line":159,"column":12},"end":{"line":161,"column":13}},"94":{"start":{"line":160,"column":16},"end":{"line":160,"column":77}},"95":{"start":{"line":162,"column":31},"end":{"line":162,"column":56}},"96":{"start":{"line":163,"column":30},"end":{"line":163,"column":63}},"97":{"start":{"line":164,"column":24},"end":{"line":164,"column":47}},"98":{"start":{"line":165,"column":28},"end":{"line":165,"column":59}},"99":{"start":{"line":166,"column":31},"end":{"line":166,"column":63}},"100":{"start":{"line":167,"column":27},"end":{"line":167,"column":41}},"101":{"start":{"line":168,"column":12},"end":{"line":188,"column":13}},"102":{"start":{"line":170,"column":27},"end":{"line":170,"column":47}},"103":{"start":{"line":171,"column":16},"end":{"line":187,"column":17}},"104":{"start":{"line":172,"column":39},"end":{"line":172,"column":54}},"105":{"start":{"line":173,"column":20},"end":{"line":186,"column":21}},"106":{"start":{"line":174,"column":24},"end":{"line":184,"column":37}},"107":{"start":{"line":177,"column":28},"end":{"line":182,"column":29}},"108":{"start":{"line":178,"column":45},"end":{"line":178,"column":81}},"109":{"start":{"line":179,"column":32},"end":{"line":179,"column":65}},"110":{"start":{"line":185,"column":24},"end":{"line":185,"column":50}},"111":{"start":{"line":189,"column":12},"end":{"line":189,"column":40}},"112":{"start":{"line":190,"column":12},"end":{"line":190,"column":36}},"113":{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},"114":{"start":{"line":192,"column":16},"end":{"line":192,"column":74}},"115":{"start":{"line":194,"column":12},"end":{"line":194,"column":92}},"116":{"start":{"line":195,"column":12},"end":{"line":195,"column":89}},"117":{"start":{"line":198,"column":12},"end":{"line":198,"column":83}},"118":{"start":{"line":202,"column":19},"end":{"line":207,"column":9}},"119":{"start":{"line":208,"column":8},"end":{"line":208,"column":112}},"120":{"start":{"line":211,"column":22},"end":{"line":211,"column":24}},"121":{"start":{"line":212,"column":19},"end":{"line":216,"column":9}},"122":{"start":{"line":217,"column":8},"end":{"line":217,"column":58}},"123":{"start":{"line":218,"column":8},"end":{"line":222,"column":9}},"124":{"start":{"line":219,"column":12},"end":{"line":221,"column":13}},"125":{"start":{"line":220,"column":16},"end":{"line":220,"column":47}},"126":{"start":{"line":223,"column":8},"end":{"line":223,"column":40}},"127":{"start":{"line":226,"column":0},"end":{"line":226,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":18},"end":{"line":20,"column":5}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":40},"end":{"line":32,"column":5}},"line":21},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":28},"end":{"line":48,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":24},"end":{"line":69,"column":5}},"line":49},"5":{"name":"(anonymous_5)","decl":{"start":{"line":50,"column":27},"end":{"line":50,"column":28}},"loc":{"start":{"line":50,"column":48},"end":{"line":68,"column":9}},"line":50},"6":{"name":"(anonymous_6)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":19},"end":{"line":80,"column":5}},"line":70},"7":{"name":"(anonymous_7)","decl":{"start":{"line":71,"column":27},"end":{"line":71,"column":28}},"loc":{"start":{"line":71,"column":48},"end":{"line":79,"column":9}},"line":71},"8":{"name":"(anonymous_8)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":17},"end":{"line":98,"column":5}},"line":81},"9":{"name":"(anonymous_9)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":21},"end":{"line":110,"column":5}},"line":99},"10":{"name":"(anonymous_10)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":41},"end":{"line":152,"column":5}},"line":111},"11":{"name":"(anonymous_11)","decl":{"start":{"line":127,"column":38},"end":{"line":127,"column":39}},"loc":{"start":{"line":127,"column":55},"end":{"line":131,"column":29}},"line":127},"12":{"name":"(anonymous_12)","decl":{"start":{"line":132,"column":39},"end":{"line":132,"column":40}},"loc":{"start":{"line":132,"column":46},"end":{"line":134,"column":29}},"line":132},"13":{"name":"(anonymous_13)","decl":{"start":{"line":153,"column":4},"end":{"line":153,"column":5}},"loc":{"start":{"line":153,"column":39},"end":{"line":200,"column":5}},"line":153},"14":{"name":"(anonymous_14)","decl":{"start":{"line":176,"column":34},"end":{"line":176,"column":35}},"loc":{"start":{"line":176,"column":55},"end":{"line":183,"column":25}},"line":176},"15":{"name":"(anonymous_15)","decl":{"start":{"line":201,"column":4},"end":{"line":201,"column":5}},"loc":{"start":{"line":201,"column":38},"end":{"line":209,"column":5}},"line":201},"16":{"name":"(anonymous_16)","decl":{"start":{"line":210,"column":4},"end":{"line":210,"column":5}},"loc":{"start":{"line":210,"column":34},"end":{"line":224,"column":5}},"line":210}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},{"start":{"line":22,"column":8},"end":{"line":24,"column":9}}],"line":22},"4":{"loc":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},{"start":{"line":25,"column":8},"end":{"line":27,"column":9}}],"line":25},"5":{"loc":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},{"start":{"line":28,"column":8},"end":{"line":30,"column":9}}],"line":28},"6":{"loc":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},{"start":{"line":34,"column":8},"end":{"line":36,"column":9}}],"line":34},"7":{"loc":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},{"start":{"line":37,"column":8},"end":{"line":39,"column":9}}],"line":37},"8":{"loc":{"start":{"line":54,"column":16},"end":{"line":56,"column":17}},"type":"if","locations":[{"start":{"line":54,"column":16},"end":{"line":56,"column":17}},{"start":{"line":54,"column":16},"end":{"line":56,"column":17}}],"line":54},"9":{"loc":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},{"start":{"line":57,"column":16},"end":{"line":59,"column":17}}],"line":57},"10":{"loc":{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},"type":"if","locations":[{"start":{"line":74,"column":16},"end":{"line":76,"column":17}},{"start":{"line":74,"column":16},"end":{"line":76,"column":17}}],"line":74},"11":{"loc":{"start":{"line":102,"column":12},"end":{"line":107,"column":13}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":107,"column":13}},{"start":{"line":102,"column":12},"end":{"line":107,"column":13}}],"line":102},"12":{"loc":{"start":{"line":105,"column":17},"end":{"line":107,"column":13}},"type":"if","locations":[{"start":{"line":105,"column":17},"end":{"line":107,"column":13}},{"start":{"line":105,"column":17},"end":{"line":107,"column":13}}],"line":105},"13":{"loc":{"start":{"line":122,"column":20},"end":{"line":137,"column":21}},"type":"if","locations":[{"start":{"line":122,"column":20},"end":{"line":137,"column":21}},{"start":{"line":122,"column":20},"end":{"line":137,"column":21}}],"line":122},"14":{"loc":{"start":{"line":122,"column":24},"end":{"line":122,"column":86}},"type":"binary-expr","locations":[{"start":{"line":122,"column":24},"end":{"line":122,"column":43}},{"start":{"line":122,"column":47},"end":{"line":122,"column":86}}],"line":122},"15":{"loc":{"start":{"line":124,"column":24},"end":{"line":136,"column":25}},"type":"if","locations":[{"start":{"line":124,"column":24},"end":{"line":136,"column":25}},{"start":{"line":124,"column":24},"end":{"line":136,"column":25}}],"line":124},"16":{"loc":{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},"type":"if","locations":[{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},{"start":{"line":143,"column":12},"end":{"line":145,"column":13}}],"line":143},"17":{"loc":{"start":{"line":159,"column":12},"end":{"line":161,"column":13}},"type":"if","locations":[{"start":{"line":159,"column":12},"end":{"line":161,"column":13}},{"start":{"line":159,"column":12},"end":{"line":161,"column":13}}],"line":159},"18":{"loc":{"start":{"line":171,"column":16},"end":{"line":187,"column":17}},"type":"if","locations":[{"start":{"line":171,"column":16},"end":{"line":187,"column":17}},{"start":{"line":171,"column":16},"end":{"line":187,"column":17}}],"line":171},"19":{"loc":{"start":{"line":171,"column":20},"end":{"line":171,"column":52}},"type":"binary-expr","locations":[{"start":{"line":171,"column":20},"end":{"line":171,"column":24}},{"start":{"line":171,"column":28},"end":{"line":171,"column":52}}],"line":171},"20":{"loc":{"start":{"line":173,"column":20},"end":{"line":186,"column":21}},"type":"if","locations":[{"start":{"line":173,"column":20},"end":{"line":186,"column":21}},{"start":{"line":173,"column":20},"end":{"line":186,"column":21}}],"line":173},"21":{"loc":{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},"type":"if","locations":[{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},{"start":{"line":191,"column":12},"end":{"line":193,"column":13}}],"line":191},"22":{"loc":{"start":{"line":219,"column":12},"end":{"line":221,"column":13}},"type":"if","locations":[{"start":{"line":219,"column":12},"end":{"line":221,"column":13}},{"start":{"line":219,"column":12},"end":{"line":221,"column":13}}],"line":219}},"s":{"0":1,"1":5,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":73,"13":73,"14":93,"15":8,"16":85,"17":4,"18":81,"19":55,"20":26,"21":17,"22":3,"23":14,"24":3,"25":11,"26":11,"27":11,"28":11,"29":0,"30":183,"31":183,"32":183,"33":183,"34":183,"35":0,"36":183,"37":2,"38":181,"39":99,"40":99,"41":93,"42":90,"43":14,"44":14,"45":14,"46":19,"47":17,"48":14,"49":73,"50":73,"51":73,"52":73,"53":10,"54":10,"55":10,"56":0,"57":121,"58":121,"59":522,"60":7,"61":515,"62":482,"63":114,"64":55,"65":55,"66":55,"67":55,"68":55,"69":52,"70":52,"71":52,"72":35966,"73":35966,"74":35870,"75":35870,"76":35870,"77":35870,"78":35865,"79":35865,"80":9,"81":35870,"82":52,"83":52,"84":11,"85":41,"86":41,"87":14,"88":26,"89":26,"90":26,"91":26,"92":23,"93":23,"94":5,"95":18,"96":18,"97":18,"98":18,"99":18,"100":18,"101":18,"102":311,"103":311,"104":311,"105":311,"106":163,"107":163,"108":163,"109":163,"110":163,"111":18,"112":18,"113":18,"114":12,"115":6,"116":6,"117":20,"118":47,"119":47,"120":47,"121":47,"122":47,"123":47,"124":61,"125":61,"126":47,"127":1},"f":{"0":5,"1":73,"2":93,"3":17,"4":183,"5":183,"6":14,"7":14,"8":73,"9":121,"10":55,"11":35870,"12":9,"13":26,"14":163,"15":47,"16":47},"b":{"0":[1,1,1],"1":[3,2],"2":[5,5],"3":[8,85],"4":[4,81],"5":[55,26],"6":[3,14],"7":[3,11],"8":[0,183],"9":[2,181],"10":[17,2],"11":[7,515],"12":[482,33],"13":[35870,96],"14":[35966,35925],"15":[35870,0],"16":[11,41],"17":[5,18],"18":[311,0],"19":[311,311],"20":[163,148],"21":[12,6],"22":[61,0]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/controller/InsightFacade.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n} from \"./IInsightFacade\";\nimport Sections from \"../models/Sections\";\nimport Rooms from \"../models/Rooms\";\n\nimport fs from \"fs-extra\";\nimport JSZip from \"jszip\";\nimport QueryValidator from \"../models/QueryValidator\";\nimport {Query} from \"../models/Query\";\nimport {JSONQuery} from \"../models/IQuery\";\nimport {parse} from \"parse5\";\nimport {Document} from \"parse5/dist/tree-adapters/default\";\n\nconst persistDir = \"./data\";\n// const tempDir = \"./temp\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n */\nexport default class InsightFacade implements IInsightFacade {\n\t// Datasets is a map of dataset ids to if they are used or not.\n\tprivate static datasets: Map<string, InsightDataset | false>;\n\n\tconstructor() {\n\t\tInsightFacade.datasets = new Map();\n\t\tthis.initialize();\n\t\t// console.log(\"InsightFacadeImpl::init()\");\n\t}\n\n\t// 1. Check valid InsightDatasetKind\n\t// 2. Check valid id\n\t// 3. Check Valid content\n\t// 4. Add dataset\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\tif (this.isNotValidID(id)) {\n\t\t\t// Reject if id is not valid\n\t\t\treturn Promise.reject(new InsightError(\"Invalid id\"));\n\t\t}\n\t\t// Reject if a dataset with the same id is already present\n\t\tif (InsightFacade.datasets.get(id)) {\n\t\t\treturn Promise.reject(new InsightError(\"id already present in dataset\"));\n\t\t}\n\n\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\treturn this.addSectionDataset(id, content);\n\t\t}\n\t\treturn this.addRoomsDataset(id, content);\n\t}\n\n\t// 1. Check valid id\n\t// 2. Check id is in dataset\n\t// 3. Remove dataset\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\tif (this.isNotValidID(id)) {\n\t\t\treturn Promise.reject(new InsightError(\"Invalid id\"));\n\t\t}\n\t\tif (!InsightFacade.datasets.get(id)) {\n\t\t\treturn Promise.reject(new NotFoundError(\"ID not present in dataset\"));\n\t\t}\n\n\t\ttry {\n\t\t\tawait fs.remove(persistDir + \"/\" + id + \".json\");\n\t\t\tInsightFacade.datasets.set(id, false);\n\t\t\treturn Promise.resolve(id);\n\t\t} catch {\n\t\t\treturn Promise.reject(new InsightError(\"Error removing dataset\"));\n\t\t}\n\t}\n\n\t// 1. Check dataset is present\n\t// 2. Check Query is valid\n\t// 3. Check id is a query that was added\n\t// 4. Check that output is not too large\n\t// 5. return output\n\tpublic performQuery(query: unknown): Promise<InsightResult[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet results: InsightResult[] = [];\n\t\t\tlet QV: QueryValidator = new QueryValidator();\n\n\t\t\ttry {\n\t\t\t\tif (!fs.pathExistsSync(persistDir)) {\n\t\t\t\t\tthrow new InsightError(\"No datasets added\");\n\t\t\t\t}\n\n\t\t\t\tif (typeof query !== \"object\") {\n\t\t\t\t\tthrow new InsightError(\"Query must be an object\");\n\t\t\t\t}\n\t\t\t\tQV.validateQuery(query as object);\n\t\t\t\tlet parsedQuery = new Query(query as JSONQuery);\n\t\t\t\tresults = parsedQuery.execute();\n\t\t\t\tresolve(results);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic listDatasets(): Promise<InsightDataset[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet result: InsightDataset[] = [];\n\t\t\tfor (let dataset of InsightFacade.datasets.values()) {\n\t\t\t\tif (dataset) {\n\t\t\t\t\tresult.push(dataset);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve(result);\n\t\t});\n\t}\n\n\tprivate initialize(): void {\n\t\ttry {\n\t\t\tfs.ensureDirSync(persistDir);\n\t\t\tlet files = fs.readdirSync(persistDir);\n\t\t\tfor (let file of files) {\n\t\t\t\tlet object = fs.readJSONSync(persistDir + \"/\" + file);\n\t\t\t\tlet data: InsightDataset = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tkind: object.kind,\n\t\t\t\t\tnumRows: object.numRows,\n\t\t\t\t};\n\t\t\t\tInsightFacade.datasets.set(object.id, data);\n\t\t\t}\n\t\t} catch {\n\t\t\tconsole.error(\"Unable to initialize directory\");\n\t\t}\n\t}\n\n\t// Returns true if id is an empty string, contains only white space or contains an undersore\n\tpublic isNotValidID(id: string): boolean {\n\t\tlet isNotValid: boolean = true;\n\t\tfor (let letter of id) {\n\t\t\tif (letter === \"_\") {\n\t\t\t\treturn true;\n\t\t\t} else if (letter !== \" \") {\n\t\t\t\tisNotValid = false;\n\t\t\t}\n\t\t}\n\t\treturn isNotValid;\n\t}\n\n\tprivate async addSectionDataset(id: string, content: string): Promise<string[]> {\n\t\ttry {\n\t\t\tlet dataset = new Sections(id);\n\t\t\tconst stringBuffer = Buffer.from(content, \"base64\");\n\t\t\tconst zip = new JSZip();\n\t\t\tawait zip.loadAsync(stringBuffer);\n\t\t\tconst files = zip.files;\n\n\t\t\tconst promises = [];\n\n\t\t\tfor (let fileName of Object.keys(files)) {\n\t\t\t\ttry {\n\t\t\t\t\tlet newPromise;\n\t\t\t\t\tif (fileName.length > 8 && fileName.substring(0, 8) === \"courses/\") {\n\t\t\t\t\t\tlet file = zip.files[fileName];\n\t\t\t\t\t\tif (!file.dir) {\n\t\t\t\t\t\t\tnewPromise = file\n\t\t\t\t\t\t\t\t.async(\"text\")\n\t\t\t\t\t\t\t\t.then((fileContent) => {\n\t\t\t\t\t\t\t\t\tlet object = JSON.parse(fileContent);\n\t\t\t\t\t\t\t\t\tlet result = object[\"result\"];\n\t\t\t\t\t\t\t\t\tdataset.addSections(result);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t\t\t\t\t}); // Catch any error\n\t\t\t\t\t\t\tpromises.push(newPromise);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch {\n\t\t\t\t\t// It's ok to catch a single itteration\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait Promise.all(promises);\n\n\t\t\tif (dataset.getSize() < 1) {\n\t\t\t\tthrow new InsightError(\"No valid sections\");\n\t\t\t}\n\t\t\tawait this.writeDatasetToFile(dataset, InsightDatasetKind.Sections);\n\t\t\treturn this.updateDatasets(dataset, InsightDatasetKind.Sections);\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Error extracting data: \" + e);\n\t\t}\n\t}\n\n\tprivate async addRoomsDataset(id: string, content: string): Promise<string[]> {\n\t\ttry {\n\t\t\tconst stringBuffer = Buffer.from(content, \"base64\");\n\t\t\tconst zip = new JSZip();\n\t\t\tawait zip.loadAsync(stringBuffer);\n\t\t\tlet index = zip.files[\"index.htm\"];\n\t\t\tif (!index) {\n\t\t\t\tthrow new InsightError(\"No index.htm file\");\n\t\t\t}\n\t\t\tlet indexContent = await index.async(\"text\");\n\t\t\tlet htmlContent = parse(indexContent);\n\t\t\tlet rooms = new Rooms(id);\n\t\t\tlet buildings = rooms.addBuildings(htmlContent);\n\t\t\tlet firstPromise = rooms.getGeolocations(buildings);\n\t\t\tlet promises = [firstPromise];\n\t\t\tfor (let building of buildings) {\n\t\t\t\tlet newPromise;\n\t\t\t\tlet link = building.get(\"href\");\n\t\t\t\tif (link && typeof link === \"string\") {\n\t\t\t\t\tlet buildingFile = zip.files[link];\n\t\t\t\t\tif (buildingFile) {\n\t\t\t\t\t\tnewPromise = buildingFile\n\t\t\t\t\t\t\t.async(\"text\")\n\t\t\t\t\t\t\t.then((buildingContent) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tlet parsed = parse(buildingContent);\n\t\t\t\t\t\t\t\t\trooms.addRooms(parsed, building);\n\t\t\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t\t\t// Do nothing\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(); // Do nothing\n\t\t\t\t\t\tpromises.push(newPromise);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait Promise.all(promises);\n\t\t\trooms.update(buildings);\n\n\t\t\tif (rooms.getSize() < 1) {\n\t\t\t\tthrow new InsightError(\"No valid rooms\");\n\t\t\t}\n\t\t\tawait this.writeDatasetToFile(rooms, InsightDatasetKind.Rooms);\n\t\t\treturn this.updateDatasets(rooms, InsightDatasetKind.Rooms);\n\t\t} catch (e) {\n\t\t\tthrow new InsightError(\"Error extracting data: \" + e);\n\t\t}\n\t}\n\n\tprivate writeDatasetToFile(dataset: Sections | Rooms, kind: InsightDatasetKind): Promise<void> {\n\t\tlet data = {\n\t\t\tid: dataset.getId(),\n\t\t\tkind: kind,\n\t\t\tnumRows: dataset.getSize(),\n\t\t\tsections: dataset.getData(),\n\t\t};\n\t\treturn fs.writeFile(persistDir + \"/\" + dataset.getId() + \".json\", JSON.stringify(data));\n\t}\n\n\tprivate updateDatasets(dataset: Sections | Rooms, kind: InsightDatasetKind): Promise<string[]> {\n\t\tlet results: string[] = [];\n\t\tlet data: InsightDataset = {\n\t\t\tid: dataset.getId(),\n\t\t\tkind: kind,\n\t\t\tnumRows: dataset.getSize(),\n\t\t};\n\t\tInsightFacade.datasets.set(dataset.getId(), data);\n\t\tfor (let potentialDataset of InsightFacade.datasets.keys()) {\n\t\t\tif (InsightFacade.datasets.get(potentialDataset)) {\n\t\t\t\tresults.push(potentialDataset);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(results);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b869ab494ac4483294dd2238564ae50de9fd0861","contentHash":"47b194fce0aa7c73450b0431b128cbc7e653fcfe91ca439e62d7113cfbcbde74"},"/Users/han/code/cpsc310/c1/project_team123/src/models/Sections.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/models/Sections.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":38}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":64}},"4":{"start":{"line":10,"column":8},"end":{"line":18,"column":9}},"5":{"start":{"line":11,"column":12},"end":{"line":17,"column":13}},"6":{"start":{"line":12,"column":41},"end":{"line":12,"column":65}},"7":{"start":{"line":13,"column":16},"end":{"line":13,"column":49}},"8":{"start":{"line":14,"column":16},"end":{"line":14,"column":28}},"9":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"10":{"start":{"line":22,"column":12},"end":{"line":22,"column":73}},"11":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"12":{"start":{"line":25,"column":12},"end":{"line":25,"column":37}},"13":{"start":{"line":29,"column":25},"end":{"line":40,"column":9}},"14":{"start":{"line":41,"column":8},"end":{"line":41,"column":26}},"15":{"start":{"line":44,"column":20},"end":{"line":44,"column":32}},"16":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"17":{"start":{"line":46,"column":12},"end":{"line":46,"column":75}},"18":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"19":{"start":{"line":49,"column":12},"end":{"line":49,"column":23}},"20":{"start":{"line":51,"column":8},"end":{"line":65,"column":9}},"21":{"start":{"line":52,"column":12},"end":{"line":61,"column":13}},"22":{"start":{"line":53,"column":16},"end":{"line":53,"column":38}},"23":{"start":{"line":56,"column":29},"end":{"line":56,"column":46}},"24":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"25":{"start":{"line":58,"column":20},"end":{"line":58,"column":62}},"26":{"start":{"line":60,"column":16},"end":{"line":60,"column":30}},"27":{"start":{"line":64,"column":12},"end":{"line":64,"column":93}},"28":{"start":{"line":68,"column":8},"end":{"line":68,"column":54}},"29":{"start":{"line":71,"column":8},"end":{"line":71,"column":54}},"30":{"start":{"line":74,"column":8},"end":{"line":79,"column":9}},"31":{"start":{"line":75,"column":12},"end":{"line":75,"column":24}},"32":{"start":{"line":78,"column":12},"end":{"line":78,"column":53}},"33":{"start":{"line":82,"column":0},"end":{"line":82,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":20},"end":{"line":8,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":24},"end":{"line":19,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":26},"end":{"line":27,"column":5}},"line":20},"3":{"name":"(anonymous_3)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":24},"end":{"line":42,"column":5}},"line":28},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":34},"end":{"line":66,"column":5}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":30},"end":{"line":69,"column":5}},"line":67},"6":{"name":"(anonymous_6)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":30},"end":{"line":72,"column":5}},"line":70},"7":{"name":"(anonymous_7)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":21},"end":{"line":80,"column":5}},"line":73}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":18,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":18,"column":9}},{"start":{"line":10,"column":8},"end":{"line":18,"column":9}}],"line":10},"1":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"2":{"loc":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},{"start":{"line":45,"column":8},"end":{"line":47,"column":9}}],"line":45},"3":{"loc":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},{"start":{"line":48,"column":8},"end":{"line":50,"column":9}}],"line":48},"4":{"loc":{"start":{"line":52,"column":12},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":61,"column":13}},{"start":{"line":52,"column":12},"end":{"line":61,"column":13}}],"line":52},"5":{"loc":{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":59,"column":17}},{"start":{"line":57,"column":16},"end":{"line":59,"column":17}}],"line":57},"6":{"loc":{"start":{"line":57,"column":20},"end":{"line":57,"column":43}},"type":"binary-expr","locations":[{"start":{"line":57,"column":20},"end":{"line":57,"column":27}},{"start":{"line":57,"column":31},"end":{"line":57,"column":43}}],"line":57},"7":{"loc":{"start":{"line":74,"column":8},"end":{"line":79,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":79,"column":9}},{"start":{"line":74,"column":8},"end":{"line":79,"column":9}}],"line":74}},"s":{"0":1,"1":1,"2":1,"3":136,"4":402247,"5":402246,"6":402246,"7":402221,"8":402221,"9":35868,"10":3,"11":35865,"12":402238,"13":402246,"14":402221,"15":3873781,"16":3873781,"17":23,"18":3873758,"19":3217847,"20":655911,"21":655911,"22":402233,"23":253678,"24":253678,"25":2,"26":253676,"27":2,"28":2011192,"29":1862589,"30":402234,"31":148554,"32":253680,"33":1},"f":{"0":136,"1":402247,"2":35868,"3":402246,"4":3873781,"5":2011192,"6":1862589,"7":402234},"b":{"0":[402246,1],"1":[3,35865],"2":[23,3873758],"3":[3217847,655911],"4":[402233,253678],"5":[2,253676],"6":[253678,4],"7":[148554,253680]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/models/Sections.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/models/Sections.ts"],"names":[],"mappings":"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","sourcesContent":["import {InsightDatasetKind, InsightError} from \"../controller/IInsightFacade\";\nimport {Dataset} from \"./Dataset\";\n\nexport interface Section {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n\tyear: number;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n}\n\nexport default class Sections extends Dataset {\n\tconstructor(id: string) {\n\t\tsuper(id, InsightDatasetKind.Sections);\n\t}\n\n\t// Adds section to this.section and increases size by 1\n\t// If section is missing required keys then it does not add\n\tpublic addSection(section: any): void {\n\t\tif (section !== undefined) {\n\t\t\ttry {\n\t\t\t\tconst formattedSection: Section = this.newSection(section);\n\t\t\t\tthis.data.push(formattedSection);\n\t\t\t\t// console.log(this.data)\n\t\t\t\tthis.size++;\n\t\t\t} catch {\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t}\n\t}\n\n\t// Adds sections to a dataset\n\t// Throws InsightError if input list is empty\n\tpublic addSections(sections: any[]): void {\n\t\t// console.log(this.getSize())\n\t\tif (sections === undefined) {\n\t\t\tthrow new InsightError(\"No valid sections\");\n\t\t}\n\t\tfor (let section of sections) {\n\t\t\tthis.addSection(section);\n\t\t}\n\t\t// console.log(this.getSize())\n\t}\n\n\tprivate newSection(section: any): Section {\n\t\tlet newSection: Section = {\n\t\t\tuuid: this.keyToString(section, \"id\"),\n\t\t\tid: this.keyToString(section, \"Course\"),\n\t\t\ttitle: this.keyToString(section, \"Title\"),\n\t\t\tinstructor: this.keyToString(section, \"Professor\"),\n\t\t\tdept: this.keyToString(section, \"Subject\"),\n\t\t\tyear: this.getYear(section),\n\t\t\tavg: this.keyToNumber(section, \"Avg\"),\n\t\t\tpass: this.keyToNumber(section, \"Pass\"),\n\t\t\tfail: this.keyToNumber(section, \"Fail\"),\n\t\t\taudit: this.keyToNumber(section, \"Audit\"),\n\t\t};\n\t\treturn newSection;\n\t}\n\n\t// Checks the type of the key and tries to conver to type, otherwise throws InsightError\n\tprivate keyToType(section: any, key: string, type: \"string\" | \"number\"): string | number {\n\t\tconst obj = section[key];\n\t\tif (obj === undefined) {\n\t\t\tthrow new InsightError(key + \" is undefined\");\n\t\t}\n\t\tif (typeof obj === type) {\n\t\t\treturn obj;\n\t\t}\n\n\t\ttry {\n\t\t\tif (type === \"string\") {\n\t\t\t\t// console.log(\"returning: \" + key)\n\t\t\t\treturn obj.toString();\n\t\t\t} else {\n\t\t\t\tlet result = parseInt(obj, 10);\n\t\t\t\tif (!result && result !== 0) {\n\t\t\t\t\tthrow new InsightError();\n\t\t\t\t}\n\t\t\t\t// console.log(\"returning: \" + key);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} catch {\n\t\t\tthrow new InsightError(key + \" cannot be converted to \" + type);\n\t\t}\n\t}\n\n\tprivate keyToString(section: any, key: string): string {\n\t\treturn this.keyToType(section, key, \"string\") as string;\n\t}\n\n\tprivate keyToNumber(section: any, key: string): number {\n\t\treturn this.keyToType(section, key, \"number\") as number;\n\t}\n\n\tprivate getYear(section: any): number {\n\t\tif (section[\"Section\"] === \"overall\") {\n\t\t\treturn 1900;\n\t\t} else {\n\t\t\treturn this.keyToNumber(section, \"Year\");\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"953642cde33462425239b2a2bdba8bbf0a653760","contentHash":"c03ffbd8b4fe71321dadedd02dd69a0349c33b4156d2194fca4042cfb1e24400"},"/Users/han/code/cpsc310/c1/project_team123/src/models/Dataset.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/models/Dataset.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":64}},"3":{"start":{"line":11,"column":8},"end":{"line":11,"column":22}},"4":{"start":{"line":12,"column":8},"end":{"line":12,"column":21}},"5":{"start":{"line":13,"column":8},"end":{"line":13,"column":25}},"6":{"start":{"line":14,"column":8},"end":{"line":14,"column":23}},"7":{"start":{"line":17,"column":8},"end":{"line":17,"column":23}},"8":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":25}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":25}},"11":{"start":{"line":29,"column":20},"end":{"line":29,"column":29}},"12":{"start":{"line":30,"column":8},"end":{"line":32,"column":11}},"13":{"start":{"line":31,"column":12},"end":{"line":31,"column":113}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":19}},"15":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"16":{"start":{"line":37,"column":12},"end":{"line":37,"column":77}},"17":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"18":{"start":{"line":40,"column":12},"end":{"line":40,"column":45}},"19":{"start":{"line":44,"column":8},"end":{"line":47,"column":9}},"20":{"start":{"line":45,"column":12},"end":{"line":45,"column":34}},"21":{"start":{"line":46,"column":12},"end":{"line":46,"column":24}},"22":{"start":{"line":50,"column":0},"end":{"line":50,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":26},"end":{"line":15,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":12},"end":{"line":18,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":14},"end":{"line":21,"column":5}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":14},"end":{"line":24,"column":5}},"line":22},"4":{"name":"(anonymous_4)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":14},"end":{"line":27,"column":5}},"line":25},"5":{"name":"(anonymous_5)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":19},"end":{"line":34,"column":5}},"line":28},"6":{"name":"(anonymous_6)","decl":{"start":{"line":30,"column":26},"end":{"line":30,"column":27}},"loc":{"start":{"line":30,"column":37},"end":{"line":32,"column":9}},"line":30},"7":{"name":"(anonymous_7)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":30},"end":{"line":42,"column":5}},"line":35},"8":{"name":"(anonymous_8)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":32},"end":{"line":48,"column":5}},"line":43}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":20},"end":{"line":31,"column":104}},"type":"cond-expr","locations":[{"start":{"line":31,"column":81},"end":{"line":31,"column":91}},{"start":{"line":31,"column":94},"end":{"line":31,"column":104}}],"line":31},"1":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"2":{"loc":{"start":{"line":44,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":47,"column":9}},{"start":{"line":44,"column":8},"end":{"line":47,"column":9}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":181,"4":181,"5":181,"6":181,"7":188,"8":176,"9":3521399,"10":215,"11":96,"12":96,"13":4468056,"14":96,"15":96,"16":0,"17":96,"18":4468056,"19":4468056,"20":4468056,"21":4468056,"22":1},"f":{"0":181,"1":188,"2":176,"3":3521399,"4":215,"5":96,"6":4468056,"7":96,"8":4468056},"b":{"0":[4458228,9828],"1":[0,96],"2":[4468056,0]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/models/Dataset.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/models/Dataset.ts"],"names":[],"mappings":";;;AAAA,iEAA8E;AAE9E,MAAsB,OAAO;IACpB,EAAE,CAAS;IACT,IAAI,CAAS;IACf,IAAI,CAAqB;IACvB,IAAI,CAAQ;IAEtB,YAAY,EAAU,EAAE,IAAwB;QAC/C,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IAChB,CAAC;IAEM,KAAK;QACX,OAAO,IAAI,CAAC,EAAE,CAAC;IAChB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,YAAY;QAClB,MAAM,GAAG,GAAG,IAAI,GAAG,EAAe,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC3B,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACZ,CAAC;IAEM,eAAe,CAAC,QAAe;QACrC,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,6BAAY,CAAC,YAAY,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SAChD;QACD,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE;YAC3B,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;SACjC;IACF,CAAC;IAEO,oBAAoB,CAAC,KAAU;QACtC,IAAI,KAAK,KAAK,SAAS,EAAE;YACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;SACZ;IACF,CAAC;CACD;AApDD,0BAoDC","sourcesContent":["import {InsightDatasetKind, InsightError} from \"../controller/IInsightFacade\";\n\nexport abstract class Dataset {\n\tprivate id: string;\n\tprotected size: number;\n\tprivate kind: InsightDatasetKind;\n\tprotected data: any[];\n\n\tconstructor(id: string, kind: InsightDatasetKind) {\n\t\tthis.size = 0;\n\t\tthis.id = id;\n\t\tthis.kind = kind;\n\t\tthis.data = [];\n\t}\n\n\tpublic getId(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic getSize(): number {\n\t\treturn this.size;\n\t}\n\n\tpublic getKind(): InsightDatasetKind {\n\t\treturn this.kind;\n\t}\n\n\tpublic getData(): any[] {\n\t\treturn this.data;\n\t}\n\n\tpublic getDataAsMap(): Map<string, any> {\n\t\tconst map = new Map<string, any>();\n\t\tthis.data.forEach((entry) => {\n\t\t\tmap.set(this.kind === InsightDatasetKind.Sections ? entry.uuid : entry.href, entry);\n\t\t});\n\t\treturn map;\n\t}\n\n\tpublic addDataFromJSON(fileData: any[]): void {\n\t\tif (fileData === undefined) {\n\t\t\tthrow new InsightError(`No valid ${this.kind}`);\n\t\t}\n\t\tfor (let entry of fileData) {\n\t\t\tthis.addAlreadyValidEntry(entry);\n\t\t}\n\t}\n\n\tprivate addAlreadyValidEntry(entry: any) {\n\t\tif (entry !== undefined) {\n\t\t\tthis.data.push(entry);\n\t\t\tthis.size++;\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f9ae1f479cd8c806e4db9ec5081e5f45d624a756","contentHash":"20dfe138611a0923623811dad29080c5b566fb13c5e95a5c23513803823b2ada"},"/Users/han/code/cpsc310/c1/project_team123/src/models/Rooms.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/models/Rooms.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":64}},"4":{"start":{"line":7,"column":20},"end":{"line":7,"column":57}},"5":{"start":{"line":8,"column":18},"end":{"line":8,"column":38}},"6":{"start":{"line":10,"column":16},"end":{"line":10,"column":79}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":61}},"8":{"start":{"line":15,"column":24},"end":{"line":15,"column":26}},"9":{"start":{"line":16,"column":21},"end":{"line":16,"column":50}},"10":{"start":{"line":17,"column":8},"end":{"line":26,"column":9}},"11":{"start":{"line":18,"column":23},"end":{"line":18,"column":52}},"12":{"start":{"line":19,"column":23},"end":{"line":19,"column":51}},"13":{"start":{"line":20,"column":12},"end":{"line":25,"column":13}},"14":{"start":{"line":21,"column":31},"end":{"line":21,"column":52}},"15":{"start":{"line":22,"column":16},"end":{"line":24,"column":17}},"16":{"start":{"line":23,"column":20},"end":{"line":23,"column":45}},"17":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"18":{"start":{"line":30,"column":29},"end":{"line":30,"column":65}},"19":{"start":{"line":31,"column":8},"end":{"line":35,"column":9}},"20":{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},"21":{"start":{"line":33,"column":16},"end":{"line":33,"column":29}},"22":{"start":{"line":36,"column":8},"end":{"line":36,"column":20}},"23":{"start":{"line":39,"column":23},"end":{"line":39,"column":32}},"24":{"start":{"line":40,"column":8},"end":{"line":40,"column":116}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":115}},"26":{"start":{"line":42,"column":8},"end":{"line":42,"column":100}},"27":{"start":{"line":43,"column":8},"end":{"line":43,"column":76}},"28":{"start":{"line":44,"column":8},"end":{"line":44,"column":24}},"29":{"start":{"line":47,"column":20},"end":{"line":47,"column":22}},"30":{"start":{"line":48,"column":21},"end":{"line":48,"column":60}},"31":{"start":{"line":49,"column":8},"end":{"line":64,"column":9}},"32":{"start":{"line":50,"column":23},"end":{"line":50,"column":52}},"33":{"start":{"line":51,"column":23},"end":{"line":51,"column":51}},"34":{"start":{"line":52,"column":12},"end":{"line":63,"column":13}},"35":{"start":{"line":53,"column":27},"end":{"line":53,"column":44}},"36":{"start":{"line":54,"column":32},"end":{"line":54,"column":57}},"37":{"start":{"line":55,"column":29},"end":{"line":55,"column":47}},"38":{"start":{"line":56,"column":16},"end":{"line":59,"column":17}},"39":{"start":{"line":57,"column":31},"end":{"line":57,"column":55}},"40":{"start":{"line":58,"column":20},"end":{"line":58,"column":43}},"41":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"42":{"start":{"line":61,"column":20},"end":{"line":61,"column":37}},"43":{"start":{"line":65,"column":8},"end":{"line":65,"column":37}},"44":{"start":{"line":68,"column":8},"end":{"line":92,"column":9}},"45":{"start":{"line":69,"column":24},"end":{"line":69,"column":45}},"46":{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},"47":{"start":{"line":71,"column":16},"end":{"line":71,"column":25}},"48":{"start":{"line":73,"column":12},"end":{"line":91,"column":13}},"49":{"start":{"line":74,"column":16},"end":{"line":90,"column":17}},"50":{"start":{"line":75,"column":35},"end":{"line":87,"column":21}},"51":{"start":{"line":88,"column":20},"end":{"line":88,"column":45}},"52":{"start":{"line":89,"column":20},"end":{"line":89,"column":32}},"53":{"start":{"line":95,"column":27},"end":{"line":95,"column":83}},"54":{"start":{"line":96,"column":8},"end":{"line":100,"column":9}},"55":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"56":{"start":{"line":98,"column":16},"end":{"line":98,"column":29}},"57":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"58":{"start":{"line":102,"column":12},"end":{"line":102,"column":25}},"59":{"start":{"line":104,"column":8},"end":{"line":104,"column":20}},"60":{"start":{"line":107,"column":19},"end":{"line":107,"column":28}},"61":{"start":{"line":108,"column":8},"end":{"line":108,"column":107}},"62":{"start":{"line":109,"column":8},"end":{"line":109,"column":104}},"63":{"start":{"line":110,"column":8},"end":{"line":110,"column":98}},"64":{"start":{"line":111,"column":8},"end":{"line":111,"column":94}},"65":{"start":{"line":112,"column":8},"end":{"line":112,"column":45}},"66":{"start":{"line":113,"column":8},"end":{"line":113,"column":20}},"67":{"start":{"line":116,"column":21},"end":{"line":116,"column":23}},"68":{"start":{"line":117,"column":19},"end":{"line":117,"column":25}},"69":{"start":{"line":118,"column":8},"end":{"line":128,"column":9}},"70":{"start":{"line":119,"column":23},"end":{"line":119,"column":33}},"71":{"start":{"line":120,"column":12},"end":{"line":124,"column":13}},"72":{"start":{"line":121,"column":16},"end":{"line":123,"column":17}},"73":{"start":{"line":122,"column":20},"end":{"line":122,"column":37}},"74":{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},"75":{"start":{"line":126,"column":16},"end":{"line":126,"column":34}},"76":{"start":{"line":129,"column":8},"end":{"line":129,"column":22}},"77":{"start":{"line":132,"column":19},"end":{"line":132,"column":23}},"78":{"start":{"line":133,"column":8},"end":{"line":140,"column":9}},"79":{"start":{"line":134,"column":12},"end":{"line":139,"column":13}},"80":{"start":{"line":135,"column":16},"end":{"line":135,"column":42}},"81":{"start":{"line":138,"column":16},"end":{"line":138,"column":42}},"82":{"start":{"line":141,"column":8},"end":{"line":141,"column":20}},"83":{"start":{"line":144,"column":20},"end":{"line":144,"column":45}},"84":{"start":{"line":145,"column":8},"end":{"line":161,"column":9}},"85":{"start":{"line":146,"column":29},"end":{"line":146,"column":39}},"86":{"start":{"line":147,"column":12},"end":{"line":160,"column":13}},"87":{"start":{"line":148,"column":16},"end":{"line":159,"column":17}},"88":{"start":{"line":149,"column":20},"end":{"line":158,"column":21}},"89":{"start":{"line":153,"column":36},"end":{"line":153,"column":66}},"90":{"start":{"line":154,"column":24},"end":{"line":156,"column":25}},"91":{"start":{"line":155,"column":28},"end":{"line":155,"column":38}},"92":{"start":{"line":157,"column":24},"end":{"line":157,"column":87}},"93":{"start":{"line":162,"column":8},"end":{"line":162,"column":25}},"94":{"start":{"line":165,"column":29},"end":{"line":165,"column":53}},"95":{"start":{"line":166,"column":8},"end":{"line":175,"column":9}},"96":{"start":{"line":167,"column":29},"end":{"line":167,"column":39}},"97":{"start":{"line":168,"column":12},"end":{"line":174,"column":13}},"98":{"start":{"line":169,"column":16},"end":{"line":173,"column":17}},"99":{"start":{"line":170,"column":20},"end":{"line":172,"column":21}},"100":{"start":{"line":171,"column":24},"end":{"line":171,"column":47}},"101":{"start":{"line":176,"column":8},"end":{"line":176,"column":25}},"102":{"start":{"line":179,"column":23},"end":{"line":179,"column":25}},"103":{"start":{"line":180,"column":8},"end":{"line":206,"column":9}},"104":{"start":{"line":181,"column":26},"end":{"line":181,"column":49}},"105":{"start":{"line":182,"column":12},"end":{"line":205,"column":13}},"106":{"start":{"line":183,"column":16},"end":{"line":204,"column":17}},"107":{"start":{"line":184,"column":20},"end":{"line":184,"column":58}},"108":{"start":{"line":185,"column":34},"end":{"line":200,"column":22}},"109":{"start":{"line":186,"column":24},"end":{"line":199,"column":27}},"110":{"start":{"line":187,"column":39},"end":{"line":187,"column":41}},"111":{"start":{"line":188,"column":28},"end":{"line":190,"column":31}},"112":{"start":{"line":189,"column":32},"end":{"line":189,"column":46}},"113":{"start":{"line":191,"column":28},"end":{"line":196,"column":31}},"114":{"start":{"line":192,"column":45},"end":{"line":192,"column":61}},"115":{"start":{"line":193,"column":32},"end":{"line":193,"column":67}},"116":{"start":{"line":194,"column":32},"end":{"line":194,"column":67}},"117":{"start":{"line":195,"column":32},"end":{"line":195,"column":46}},"118":{"start":{"line":198,"column":28},"end":{"line":198,"column":47}},"119":{"start":{"line":201,"column":20},"end":{"line":201,"column":43}},"120":{"start":{"line":207,"column":8},"end":{"line":207,"column":44}},"121":{"start":{"line":210,"column":0},"end":{"line":210,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":24},"end":{"line":28,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":30},"end":{"line":37,"column":5}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":21},"end":{"line":45,"column":5}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":40},"end":{"line":66,"column":5}},"line":46},"6":{"name":"(anonymous_6)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":22},"end":{"line":93,"column":5}},"line":67},"7":{"name":"(anonymous_7)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":22},"end":{"line":105,"column":5}},"line":94},"8":{"name":"(anonymous_8)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":17},"end":{"line":114,"column":5}},"line":106},"9":{"name":"(anonymous_9)","decl":{"start":{"line":115,"column":4},"end":{"line":115,"column":5}},"loc":{"start":{"line":115,"column":24},"end":{"line":130,"column":5}},"line":115},"10":{"name":"(anonymous_10)","decl":{"start":{"line":131,"column":4},"end":{"line":131,"column":5}},"loc":{"start":{"line":131,"column":24},"end":{"line":142,"column":5}},"line":131},"11":{"name":"(anonymous_11)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":36},"end":{"line":163,"column":5}},"line":143},"12":{"name":"(anonymous_12)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":19},"end":{"line":177,"column":5}},"line":164},"13":{"name":"(anonymous_13)","decl":{"start":{"line":178,"column":4},"end":{"line":178,"column":5}},"loc":{"start":{"line":178,"column":37},"end":{"line":208,"column":5}},"line":178},"14":{"name":"(anonymous_14)","decl":{"start":{"line":185,"column":46},"end":{"line":185,"column":47}},"loc":{"start":{"line":185,"column":67},"end":{"line":200,"column":21}},"line":185},"15":{"name":"(anonymous_15)","decl":{"start":{"line":186,"column":74},"end":{"line":186,"column":75}},"loc":{"start":{"line":186,"column":88},"end":{"line":197,"column":25}},"line":186},"16":{"name":"(anonymous_16)","decl":{"start":{"line":188,"column":48},"end":{"line":188,"column":49}},"loc":{"start":{"line":188,"column":59},"end":{"line":190,"column":29}},"line":188},"17":{"name":"(anonymous_17)","decl":{"start":{"line":191,"column":47},"end":{"line":191,"column":48}},"loc":{"start":{"line":191,"column":53},"end":{"line":196,"column":29}},"line":191},"18":{"name":"(anonymous_18)","decl":{"start":{"line":197,"column":39},"end":{"line":197,"column":40}},"loc":{"start":{"line":197,"column":52},"end":{"line":199,"column":25}},"line":197}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":22,"column":16},"end":{"line":24,"column":17}},"type":"if","locations":[{"start":{"line":22,"column":16},"end":{"line":24,"column":17}},{"start":{"line":22,"column":16},"end":{"line":24,"column":17}}],"line":22},"4":{"loc":{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},{"start":{"line":32,"column":12},"end":{"line":34,"column":13}}],"line":32},"5":{"loc":{"start":{"line":56,"column":16},"end":{"line":59,"column":17}},"type":"if","locations":[{"start":{"line":56,"column":16},"end":{"line":59,"column":17}},{"start":{"line":56,"column":16},"end":{"line":59,"column":17}}],"line":56},"6":{"loc":{"start":{"line":56,"column":20},"end":{"line":56,"column":67}},"type":"binary-expr","locations":[{"start":{"line":56,"column":20},"end":{"line":56,"column":43}},{"start":{"line":56,"column":47},"end":{"line":56,"column":67}}],"line":56},"7":{"loc":{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},"type":"if","locations":[{"start":{"line":60,"column":16},"end":{"line":62,"column":17}},{"start":{"line":60,"column":16},"end":{"line":62,"column":17}}],"line":60},"8":{"loc":{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},{"start":{"line":70,"column":12},"end":{"line":72,"column":13}}],"line":70},"9":{"loc":{"start":{"line":73,"column":12},"end":{"line":91,"column":13}},"type":"if","locations":[{"start":{"line":73,"column":12},"end":{"line":91,"column":13}},{"start":{"line":73,"column":12},"end":{"line":91,"column":13}}],"line":73},"10":{"loc":{"start":{"line":73,"column":16},"end":{"line":73,"column":55}},"type":"binary-expr","locations":[{"start":{"line":73,"column":16},"end":{"line":73,"column":35}},{"start":{"line":73,"column":39},"end":{"line":73,"column":55}}],"line":73},"11":{"loc":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},{"start":{"line":97,"column":12},"end":{"line":99,"column":13}}],"line":97},"12":{"loc":{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":103,"column":9}},{"start":{"line":101,"column":8},"end":{"line":103,"column":9}}],"line":101},"13":{"loc":{"start":{"line":120,"column":12},"end":{"line":124,"column":13}},"type":"if","locations":[{"start":{"line":120,"column":12},"end":{"line":124,"column":13}},{"start":{"line":120,"column":12},"end":{"line":124,"column":13}}],"line":120},"14":{"loc":{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},"type":"if","locations":[{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},{"start":{"line":125,"column":12},"end":{"line":127,"column":13}}],"line":125},"15":{"loc":{"start":{"line":133,"column":15},"end":{"line":133,"column":60}},"type":"binary-expr","locations":[{"start":{"line":133,"column":15},"end":{"line":133,"column":30}},{"start":{"line":133,"column":34},"end":{"line":133,"column":60}}],"line":133},"16":{"loc":{"start":{"line":134,"column":12},"end":{"line":139,"column":13}},"type":"if","locations":[{"start":{"line":134,"column":12},"end":{"line":139,"column":13}},{"start":{"line":134,"column":12},"end":{"line":139,"column":13}}],"line":134},"17":{"loc":{"start":{"line":147,"column":12},"end":{"line":160,"column":13}},"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":160,"column":13}},{"start":{"line":147,"column":12},"end":{"line":160,"column":13}}],"line":147},"18":{"loc":{"start":{"line":149,"column":20},"end":{"line":158,"column":21}},"type":"if","locations":[{"start":{"line":149,"column":20},"end":{"line":158,"column":21}},{"start":{"line":149,"column":20},"end":{"line":158,"column":21}}],"line":149},"19":{"loc":{"start":{"line":149,"column":24},"end":{"line":152,"column":53}},"type":"binary-expr","locations":[{"start":{"line":149,"column":24},"end":{"line":149,"column":38}},{"start":{"line":150,"column":24},"end":{"line":150,"column":50}},{"start":{"line":151,"column":24},"end":{"line":151,"column":39}},{"start":{"line":152,"column":24},"end":{"line":152,"column":53}}],"line":149},"20":{"loc":{"start":{"line":154,"column":24},"end":{"line":156,"column":25}},"type":"if","locations":[{"start":{"line":154,"column":24},"end":{"line":156,"column":25}},{"start":{"line":154,"column":24},"end":{"line":156,"column":25}}],"line":154},"21":{"loc":{"start":{"line":168,"column":12},"end":{"line":174,"column":13}},"type":"if","locations":[{"start":{"line":168,"column":12},"end":{"line":174,"column":13}},{"start":{"line":168,"column":12},"end":{"line":174,"column":13}}],"line":168},"22":{"loc":{"start":{"line":170,"column":20},"end":{"line":172,"column":21}},"type":"if","locations":[{"start":{"line":170,"column":20},"end":{"line":172,"column":21}},{"start":{"line":170,"column":20},"end":{"line":172,"column":21}}],"line":170},"23":{"loc":{"start":{"line":170,"column":24},"end":{"line":170,"column":67}},"type":"binary-expr","locations":[{"start":{"line":170,"column":24},"end":{"line":170,"column":38}},{"start":{"line":170,"column":42},"end":{"line":170,"column":67}}],"line":170},"24":{"loc":{"start":{"line":182,"column":12},"end":{"line":205,"column":13}},"type":"if","locations":[{"start":{"line":182,"column":12},"end":{"line":205,"column":13}},{"start":{"line":182,"column":12},"end":{"line":205,"column":13}}],"line":182}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":45,"7":45,"8":18,"9":18,"10":18,"11":19,"12":19,"13":19,"14":311,"15":311,"16":311,"17":18,"18":311,"19":311,"20":933,"21":0,"22":311,"23":311,"24":311,"25":311,"26":311,"27":311,"28":311,"29":163,"30":163,"31":163,"32":99,"33":99,"34":99,"35":751,"36":751,"37":751,"38":751,"39":750,"40":750,"41":751,"42":745,"43":163,"44":18,"45":311,"46":311,"47":2,"48":309,"49":92,"50":741,"51":741,"52":741,"53":751,"54":751,"55":4498,"56":4,"57":747,"58":2,"59":745,"60":751,"61":751,"62":751,"63":751,"64":751,"65":751,"66":751,"67":5416,"68":5416,"69":5416,"70":487312,"71":487312,"72":218940,"73":481896,"74":487312,"75":23397,"76":5416,"77":7849,"78":7849,"79":9956,"80":7844,"81":2112,"82":7849,"83":3937,"84":3937,"85":13331,"86":13331,"87":13331,"88":13331,"89":3927,"90":3927,"91":5,"92":3922,"93":10,"94":1062,"95":1062,"96":1060,"97":1060,"98":1060,"99":1060,"100":1060,"101":2,"102":18,"103":18,"104":311,"105":311,"106":311,"107":311,"108":311,"109":311,"110":311,"111":311,"112":311,"113":311,"114":311,"115":311,"116":311,"117":311,"118":0,"119":311,"120":18,"121":1},"f":{"0":1,"1":45,"2":18,"3":311,"4":311,"5":163,"6":18,"7":751,"8":751,"9":5416,"10":7849,"11":3937,"12":1062,"13":18,"14":311,"15":311,"16":311,"17":311,"18":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[311,0],"4":[0,933],"5":[750,1],"6":[751,751],"7":[745,6],"8":[2,309],"9":[92,217],"10":[309,161],"11":[4,4494],"12":[2,745],"13":[218940,268372],"14":[23397,463915],"15":[17805,9961],"16":[7844,2112],"17":[13331,0],"18":[3927,9404],"19":[13331,13331,13331,13331],"20":[5,3922],"21":[1060,0],"22":[1060,0],"23":[1060,1060],"24":[311,0]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/models/Rooms.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/models/Rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import {InsightDatasetKind, InsightError} from \"../controller/IInsightFacade\";\nimport {Document} from \"parse5/dist/tree-adapters/default\";\nimport Http from \"node:http\";\nimport {Dataset} from \"./Dataset\";\n\nexport interface Room {\n\tnumber: string;\n\tname: string;\n\tseats: number;\n\ttype: string;\n\tfurniture: string;\n\thref: string;\n\tfullname: string;\n\tshortname: string;\n\taddress: string;\n\tlat: number;\n\tlon: number;\n}\n\nexport interface Building {\n\tfullname: string;\n\tshortname: string;\n\taddress: string;\n\tlat: number;\n\tlon: number;\n\trooms: Room[];\n}\n\nexport default class Rooms extends Dataset {\n\tprivate urlPrefix: string = \"http://cs310.students.cs.ubc.ca:11316/api/v1/project_team123/\";\n\n\tconstructor(id: string) {\n\t\tsuper(id, InsightDatasetKind.Rooms);\n\t}\n\n\t// Searches nodes for links to building files\n\tpublic addBuildings(index: any): Array<Map<string, string | undefined>> {\n\t\tlet buildings = [];\n\t\tlet tables = this.findTags(index, \"table\");\n\t\tfor (const table of tables) {\n\t\t\tlet body = this.findTags(table, \"tbody\");\n\t\t\tlet rows = this.findTags(body[0], \"tr\");\n\t\t\tfor (let row of rows) {\n\t\t\t\tlet building = this.addBuilding(row);\n\t\t\t\tif (this.buildingIsValid(building)) {\n\t\t\t\t\tbuildings.push(building);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buildings;\n\t}\n\n\tprivate buildingIsValid(building: Map<string, string | undefined>): boolean {\n\t\tconst requiredKeys = [\"shortname\", \"fullname\", \"address\"];\n\t\tfor (let key of requiredKeys) {\n\t\t\tif (building.get(key) === undefined) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate addBuilding(row: any): Map<string, string | undefined> {\n\t\tlet building: Map<string, string | undefined> = new Map();\n\t\tbuilding.set(\"address\", String(this.findClassValue(row, \"views-field views-field-field-building-address\")));\n\t\tbuilding.set(\"shortname\", String(this.findClassValue(row, \"views-field views-field-field-building-code\")));\n\t\tbuilding.set(\"fullname\", String(this.findClassValue(row, \"views-field views-field-title\")));\n\t\tbuilding.set(\"href\", String(this.findHref(row)?.replace(\"./\", \"\")));\n\t\treturn building;\n\t}\n\n\tpublic addRooms(buildingContent: any, building: Map<string, string | any[] | undefined>) {\n\t\tlet rooms = [];\n\t\tlet tables = this.findTags(buildingContent, \"table\");\n\t\tfor (const table of tables) {\n\t\t\tlet body = this.findTags(table, \"tbody\");\n\t\t\tlet rows = this.findTags(body[0], \"tr\");\n\t\t\tfor (let row of rows) {\n\t\t\t\tlet room = this.addRoom(row);\n\t\t\t\tlet shortname = building.get(\"shortname\");\n\t\t\t\tlet number = room.get(\"number\");\n\t\t\t\tif (shortname !== undefined && number !== undefined) {\n\t\t\t\t\tlet name = shortname + \"_\" + number;\n\t\t\t\t\troom.set(\"name\", name);\n\t\t\t\t}\n\t\t\t\tif (this.isValidRoom(room)) {\n\t\t\t\t\t// console.log(room)\n\t\t\t\t\trooms.push(room);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbuilding.set(\"rooms\", rooms);\n\t}\n\n\tpublic update(buildings: any[]): void {\n\t\tfor (let building of buildings) {\n\t\t\tlet rooms = building.get(\"rooms\");\n\t\t\tif (building.get(\"lat\") === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (rooms !== undefined && rooms.length > 0) {\n\t\t\t\tfor (let room of rooms) {\n\t\t\t\t\tlet roomData: Room = {\n\t\t\t\t\t\tnumber: room.get(\"number\"),\n\t\t\t\t\t\tname: room.get(\"name\"),\n\t\t\t\t\t\tseats: room.get(\"seats\"),\n\t\t\t\t\t\ttype: room.get(\"type\"),\n\t\t\t\t\t\tfurniture: room.get(\"furniture\"),\n\t\t\t\t\t\thref: room.get(\"href\"),\n\t\t\t\t\t\tfullname: building.get(\"fullname\"),\n\t\t\t\t\t\tshortname: building.get(\"shortname\"),\n\t\t\t\t\t\taddress: building.get(\"address\"),\n\t\t\t\t\t\tlat: building.get(\"lat\"),\n\t\t\t\t\t\tlon: building.get(\"lon\"),\n\t\t\t\t\t};\n\t\t\t\t\tthis.data.push(roomData);\n\t\t\t\t\tthis.size++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isValidRoom(room: Map<string, string | number | undefined>): boolean {\n\t\tlet requiredKeys = [\"number\", \"name\", \"seats\", \"type\", \"furniture\", \"href\"];\n\t\tfor (let key of requiredKeys) {\n\t\t\t// console.log(key)\n\t\t\t// console.log(key)\n\t\t\t// console.log(room.get(key))\n\t\t\tif (room.get(key) === undefined) {\n\t\t\t\t// console.log(key)\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (isNaN(Number(room.get(\"seats\")))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate addRoom(row: any): Map<string, string | number | undefined> {\n\t\tlet room: Map<string, string | number | undefined> = new Map();\n\n\t\troom.set(\"seats\", Number(this.findClassValue(row, \"views-field views-field-field-room-capacity\")));\n\t\troom.set(\"furniture\", this.findClassValue(row, \"views-field views-field-field-room-furniture\"));\n\t\troom.set(\"number\", this.findClassValue(row, \"views-field views-field-field-room-number\"));\n\t\troom.set(\"type\", this.findClassValue(row, \"views-field views-field-field-room-type\"));\n\t\troom.set(\"href\", this.findHref(row));\n\t\t// console.log(room)\n\t\treturn room;\n\t}\n\n\tprivate findTags(node: any, tag: string): any[] {\n\t\tlet result = [];\n\t\tlet todo = [node];\n\t\twhile (todo.length > 0) {\n\t\t\tlet curr = todo.pop();\n\t\t\tif (curr.childNodes) {\n\t\t\t\tfor (let child of curr.childNodes) {\n\t\t\t\t\ttodo.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (curr.nodeName === tag) {\n\t\t\t\tresult.push(curr);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate findFirstLeaf(node: any): any {\n\t\tlet curr = node;\n\t\twhile (curr.childNodes && curr.childNodes.length > 0) {\n\t\t\tif (curr.childNodes.length === 1) {\n\t\t\t\tcurr = curr.childNodes[0];\n\t\t\t} else {\n\t\t\t\tcurr = curr.childNodes[1];\n\t\t\t}\n\t\t}\n\t\treturn curr;\n\t}\n\n\tprivate findClassValue(node: any, className: string): string | undefined {\n\t\tlet cells = this.findTags(node, \"td\");\n\t\tfor (let cell of cells) {\n\t\t\tlet attributes = cell.attrs;\n\t\t\tif (attributes) {\n\t\t\t\tfor (let attribute of attributes) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tattribute.name &&\n\t\t\t\t\t\tattribute.name === \"class\" &&\n\t\t\t\t\t\tattribute.value &&\n\t\t\t\t\t\tattribute.value === className\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet value = this.findFirstLeaf(cell).value;\n\t\t\t\t\t\t// console.log(value)\n\t\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.findFirstLeaf(cell).value.replace(\"\\n\", \"\").trim();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate findHref(node: any): string | undefined {\n\t\tlet potentialLinks = this.findTags(node, \"a\");\n\t\tfor (let link of potentialLinks) {\n\t\t\tlet attributes = link.attrs;\n\t\t\tif (attributes) {\n\t\t\t\tfor (let attribute of attributes) {\n\t\t\t\t\tif (attribute.name && attribute.name === \"href\") {\n\t\t\t\t\t\treturn attribute.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async getGeolocations(buildings: Array<Map<string, string | undefined>>): Promise<void> {\n\t\tlet promises = [];\n\t\tfor (let building of buildings) {\n\t\t\tlet address = building.get(\"address\");\n\t\t\tif (address !== undefined) {\n\t\t\t\ttry {\n\t\t\t\t\taddress = address.replace(\" \", \"%20\");\n\t\t\t\t\tlet promise = new Promise((resolve, reject) => {\n\t\t\t\t\t\tHttp.get(this.urlPrefix + address, (response: any) => {\n\t\t\t\t\t\t\tlet body = \"\";\n\t\t\t\t\t\t\tresponse.on(\"data\", (chunk: any) => {\n\t\t\t\t\t\t\t\tbody += chunk;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresponse.on(\"end\", () => {\n\t\t\t\t\t\t\t\tlet result = JSON.parse(body);\n\t\t\t\t\t\t\t\tbuilding.set(\"lat\", result[\"lat\"]);\n\t\t\t\t\t\t\t\tbuilding.set(\"lon\", result[\"lon\"]);\n\t\t\t\t\t\t\t\tresolve(body);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}).on(\"error\", function (e) {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tpromises.push(promise);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Do nothing\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Promise.all(promises).then();\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4cb7ce0f39755afde6afe2968af2dd074f1593fa","contentHash":"53ec5f04ba5c42635c34580ff804e803df142574007385c456ddd9e236f0426a"},"/Users/han/code/cpsc310/c1/project_team123/src/models/QueryValidator.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/models/QueryValidator.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":64}},"4":{"start":{"line":7,"column":23},"end":{"line":7,"column":72}},"5":{"start":{"line":9,"column":9},"end":{"line":9,"column":37}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":41}},"7":{"start":{"line":12,"column":23},"end":{"line":12,"column":28}},"8":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"9":{"start":{"line":14,"column":12},"end":{"line":14,"column":65}},"10":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"11":{"start":{"line":17,"column":12},"end":{"line":17,"column":45}},"12":{"start":{"line":19,"column":8},"end":{"line":19,"column":45}},"13":{"start":{"line":20,"column":8},"end":{"line":20,"column":40}},"14":{"start":{"line":23,"column":21},"end":{"line":23,"column":39}},"15":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"16":{"start":{"line":25,"column":12},"end":{"line":25,"column":76}},"17":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"18":{"start":{"line":28,"column":12},"end":{"line":28,"column":69}},"19":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"20":{"start":{"line":31,"column":12},"end":{"line":31,"column":71}},"21":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"22":{"start":{"line":34,"column":12},"end":{"line":34,"column":74}},"23":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"24":{"start":{"line":37,"column":12},"end":{"line":37,"column":76}},"25":{"start":{"line":41,"column":21},"end":{"line":41,"column":39}},"26":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"27":{"start":{"line":43,"column":12},"end":{"line":43,"column":88}},"28":{"start":{"line":45,"column":20},"end":{"line":45,"column":27}},"29":{"start":{"line":46,"column":8},"end":{"line":60,"column":9}},"30":{"start":{"line":47,"column":12},"end":{"line":47,"column":48}},"31":{"start":{"line":49,"column":13},"end":{"line":60,"column":9}},"32":{"start":{"line":50,"column":12},"end":{"line":50,"column":44}},"33":{"start":{"line":52,"column":13},"end":{"line":60,"column":9}},"34":{"start":{"line":53,"column":12},"end":{"line":53,"column":44}},"35":{"start":{"line":55,"column":13},"end":{"line":60,"column":9}},"36":{"start":{"line":56,"column":12},"end":{"line":56,"column":36}},"37":{"start":{"line":59,"column":12},"end":{"line":59,"column":76}},"38":{"start":{"line":63,"column":21},"end":{"line":63,"column":41}},"39":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"40":{"start":{"line":65,"column":12},"end":{"line":65,"column":78}},"41":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"42":{"start":{"line":68,"column":12},"end":{"line":68,"column":79}},"43":{"start":{"line":70,"column":8},"end":{"line":74,"column":9}},"44":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"45":{"start":{"line":72,"column":16},"end":{"line":72,"column":89}},"46":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"47":{"start":{"line":76,"column":12},"end":{"line":76,"column":87}},"48":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"49":{"start":{"line":78,"column":44},"end":{"line":78,"column":67}},"50":{"start":{"line":79,"column":12},"end":{"line":79,"column":95}},"51":{"start":{"line":81,"column":30},"end":{"line":81,"column":32}},"52":{"start":{"line":82,"column":8},"end":{"line":85,"column":11}},"53":{"start":{"line":83,"column":12},"end":{"line":83,"column":49}},"54":{"start":{"line":84,"column":12},"end":{"line":84,"column":42}},"55":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"56":{"start":{"line":87,"column":12},"end":{"line":87,"column":61}},"57":{"start":{"line":91,"column":8},"end":{"line":110,"column":9}},"58":{"start":{"line":92,"column":12},"end":{"line":92,"column":56}},"59":{"start":{"line":94,"column":13},"end":{"line":110,"column":9}},"60":{"start":{"line":95,"column":12},"end":{"line":97,"column":13}},"61":{"start":{"line":96,"column":16},"end":{"line":96,"column":83}},"62":{"start":{"line":98,"column":12},"end":{"line":100,"column":13}},"63":{"start":{"line":99,"column":16},"end":{"line":99,"column":84}},"64":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"65":{"start":{"line":102,"column":16},"end":{"line":102,"column":96}},"66":{"start":{"line":104,"column":12},"end":{"line":106,"column":13}},"67":{"start":{"line":105,"column":16},"end":{"line":105,"column":58}},"68":{"start":{"line":109,"column":12},"end":{"line":109,"column":101}},"69":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"70":{"start":{"line":114,"column":12},"end":{"line":114,"column":85}},"71":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"72":{"start":{"line":117,"column":12},"end":{"line":117,"column":85}},"73":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"74":{"start":{"line":120,"column":12},"end":{"line":120,"column":87}},"75":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"76":{"start":{"line":123,"column":12},"end":{"line":123,"column":87}},"77":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"78":{"start":{"line":125,"column":50},"end":{"line":125,"column":73}},"79":{"start":{"line":126,"column":12},"end":{"line":126,"column":93}},"80":{"start":{"line":128,"column":8},"end":{"line":132,"column":9}},"81":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"82":{"start":{"line":130,"column":16},"end":{"line":130,"column":88}},"83":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"84":{"start":{"line":134,"column":12},"end":{"line":134,"column":41}},"85":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"86":{"start":{"line":139,"column":12},"end":{"line":139,"column":122}},"87":{"start":{"line":141,"column":25},"end":{"line":141,"column":45}},"88":{"start":{"line":142,"column":8},"end":{"line":142,"column":43}},"89":{"start":{"line":143,"column":27},"end":{"line":143,"column":41}},"90":{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},"91":{"start":{"line":145,"column":12},"end":{"line":145,"column":81}},"92":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"93":{"start":{"line":148,"column":12},"end":{"line":148,"column":128}},"94":{"start":{"line":150,"column":22},"end":{"line":150,"column":48}},"95":{"start":{"line":151,"column":28},"end":{"line":151,"column":65}},"96":{"start":{"line":152,"column":8},"end":{"line":154,"column":9}},"97":{"start":{"line":153,"column":12},"end":{"line":153,"column":87}},"98":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"99":{"start":{"line":156,"column":12},"end":{"line":156,"column":85}},"100":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"101":{"start":{"line":159,"column":12},"end":{"line":159,"column":101}},"102":{"start":{"line":163,"column":32},"end":{"line":163,"column":38}},"103":{"start":{"line":164,"column":36},"end":{"line":164,"column":64}},"104":{"start":{"line":165,"column":27},"end":{"line":165,"column":49}},"105":{"start":{"line":166,"column":28},"end":{"line":166,"column":55}},"106":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"107":{"start":{"line":168,"column":12},"end":{"line":168,"column":95}},"108":{"start":{"line":170,"column":8},"end":{"line":172,"column":9}},"109":{"start":{"line":171,"column":12},"end":{"line":171,"column":39}},"110":{"start":{"line":175,"column":26},"end":{"line":175,"column":32}},"111":{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},"112":{"start":{"line":177,"column":12},"end":{"line":177,"column":80}},"113":{"start":{"line":179,"column":8},"end":{"line":179,"column":42}},"114":{"start":{"line":182,"column":28},"end":{"line":182,"column":34}},"115":{"start":{"line":183,"column":32},"end":{"line":183,"column":56}},"116":{"start":{"line":184,"column":27},"end":{"line":184,"column":45}},"117":{"start":{"line":185,"column":28},"end":{"line":185,"column":51}},"118":{"start":{"line":186,"column":8},"end":{"line":188,"column":9}},"119":{"start":{"line":187,"column":12},"end":{"line":187,"column":92}},"120":{"start":{"line":189,"column":26},"end":{"line":189,"column":50}},"121":{"start":{"line":190,"column":8},"end":{"line":192,"column":9}},"122":{"start":{"line":191,"column":12},"end":{"line":191,"column":95}},"123":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"124":{"start":{"line":194,"column":12},"end":{"line":194,"column":101}},"125":{"start":{"line":196,"column":27},"end":{"line":196,"column":52}},"126":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"127":{"start":{"line":198,"column":12},"end":{"line":198,"column":123}},"128":{"start":{"line":202,"column":28},"end":{"line":202,"column":34}},"129":{"start":{"line":203,"column":27},"end":{"line":203,"column":54}},"130":{"start":{"line":204,"column":28},"end":{"line":204,"column":51}},"131":{"start":{"line":205,"column":8},"end":{"line":207,"column":9}},"132":{"start":{"line":206,"column":12},"end":{"line":206,"column":102}},"133":{"start":{"line":208,"column":26},"end":{"line":208,"column":50}},"134":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"135":{"start":{"line":210,"column":12},"end":{"line":210,"column":95}},"136":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"137":{"start":{"line":213,"column":12},"end":{"line":213,"column":90}},"138":{"start":{"line":215,"column":27},"end":{"line":215,"column":52}},"139":{"start":{"line":216,"column":8},"end":{"line":218,"column":9}},"140":{"start":{"line":217,"column":12},"end":{"line":217,"column":119}},"141":{"start":{"line":219,"column":8},"end":{"line":219,"column":47}},"142":{"start":{"line":222,"column":35},"end":{"line":222,"column":56}},"143":{"start":{"line":223,"column":33},"end":{"line":223,"column":52}},"144":{"start":{"line":224,"column":30},"end":{"line":224,"column":63}},"145":{"start":{"line":225,"column":8},"end":{"line":229,"column":9}},"146":{"start":{"line":227,"column":12},"end":{"line":228,"column":74}},"147":{"start":{"line":232,"column":0},"end":{"line":232,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":21,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":32},"end":{"line":39,"column":5}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":25},"end":{"line":61,"column":5}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":29},"end":{"line":89,"column":5}},"line":62},"5":{"name":"(anonymous_5)","decl":{"start":{"line":78,"column":35},"end":{"line":78,"column":36}},"loc":{"start":{"line":78,"column":44},"end":{"line":78,"column":67}},"line":78},"6":{"name":"(anonymous_6)","decl":{"start":{"line":82,"column":32},"end":{"line":82,"column":33}},"loc":{"start":{"line":82,"column":47},"end":{"line":85,"column":9}},"line":82},"7":{"name":"(anonymous_7)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":37},"end":{"line":111,"column":5}},"line":90},"8":{"name":"(anonymous_8)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":45},"end":{"line":136,"column":5}},"line":112},"9":{"name":"(anonymous_9)","decl":{"start":{"line":125,"column":41},"end":{"line":125,"column":42}},"loc":{"start":{"line":125,"column":50},"end":{"line":125,"column":73}},"line":125},"10":{"name":"(anonymous_10)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":28},"end":{"line":161,"column":5}},"line":137},"11":{"name":"(anonymous_11)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":36},"end":{"line":173,"column":5}},"line":162},"12":{"name":"(anonymous_12)","decl":{"start":{"line":174,"column":4},"end":{"line":174,"column":5}},"loc":{"start":{"line":174,"column":24},"end":{"line":180,"column":5}},"line":174},"13":{"name":"(anonymous_13)","decl":{"start":{"line":181,"column":4},"end":{"line":181,"column":5}},"loc":{"start":{"line":181,"column":32},"end":{"line":200,"column":5}},"line":181},"14":{"name":"(anonymous_14)","decl":{"start":{"line":201,"column":4},"end":{"line":201,"column":5}},"loc":{"start":{"line":201,"column":32},"end":{"line":220,"column":5}},"line":201},"15":{"name":"(anonymous_15)","decl":{"start":{"line":221,"column":4},"end":{"line":221,"column":5}},"loc":{"start":{"line":221,"column":33},"end":{"line":230,"column":5}},"line":221}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},{"start":{"line":13,"column":8},"end":{"line":15,"column":9}}],"line":13},"4":{"loc":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},{"start":{"line":16,"column":8},"end":{"line":18,"column":9}}],"line":16},"5":{"loc":{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":26,"column":9}},{"start":{"line":24,"column":8},"end":{"line":26,"column":9}}],"line":24},"6":{"loc":{"start":{"line":24,"column":12},"end":{"line":24,"column":60}},"type":"binary-expr","locations":[{"start":{"line":24,"column":12},"end":{"line":24,"column":27}},{"start":{"line":24,"column":31},"end":{"line":24,"column":60}}],"line":24},"7":{"loc":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},{"start":{"line":27,"column":8},"end":{"line":29,"column":9}}],"line":27},"8":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{"line":30,"column":8},"end":{"line":32,"column":9}}],"line":30},"9":{"loc":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},{"start":{"line":33,"column":8},"end":{"line":35,"column":9}}],"line":33},"10":{"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":73}},"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":43}},{"start":{"line":33,"column":47},"end":{"line":33,"column":73}}],"line":33},"11":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"12":{"loc":{"start":{"line":36,"column":12},"end":{"line":36,"column":77}},"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":45}},{"start":{"line":36,"column":49},"end":{"line":36,"column":77}}],"line":36},"13":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42},"14":{"loc":{"start":{"line":46,"column":8},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":60,"column":9}},{"start":{"line":46,"column":8},"end":{"line":60,"column":9}}],"line":46},"15":{"loc":{"start":{"line":46,"column":12},"end":{"line":46,"column":41}},"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":25}},{"start":{"line":46,"column":29},"end":{"line":46,"column":41}}],"line":46},"16":{"loc":{"start":{"line":49,"column":13},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":49,"column":13},"end":{"line":60,"column":9}},{"start":{"line":49,"column":13},"end":{"line":60,"column":9}}],"line":49},"17":{"loc":{"start":{"line":52,"column":13},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":52,"column":13},"end":{"line":60,"column":9}},{"start":{"line":52,"column":13},"end":{"line":60,"column":9}}],"line":52},"18":{"loc":{"start":{"line":55,"column":13},"end":{"line":60,"column":9}},"type":"if","locations":[{"start":{"line":55,"column":13},"end":{"line":60,"column":9}},{"start":{"line":55,"column":13},"end":{"line":60,"column":9}}],"line":55},"19":{"loc":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},{"start":{"line":64,"column":8},"end":{"line":66,"column":9}}],"line":64},"20":{"loc":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},{"start":{"line":67,"column":8},"end":{"line":69,"column":9}}],"line":67},"21":{"loc":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},{"start":{"line":71,"column":12},"end":{"line":73,"column":13}}],"line":71},"22":{"loc":{"start":{"line":71,"column":16},"end":{"line":71,"column":52}},"type":"binary-expr","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":33}},{"start":{"line":71,"column":37},"end":{"line":71,"column":52}}],"line":71},"23":{"loc":{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":77,"column":9}},{"start":{"line":75,"column":8},"end":{"line":77,"column":9}}],"line":75},"24":{"loc":{"start":{"line":75,"column":12},"end":{"line":75,"column":75}},"type":"binary-expr","locations":[{"start":{"line":75,"column":12},"end":{"line":75,"column":43}},{"start":{"line":75,"column":47},"end":{"line":75,"column":75}}],"line":75},"25":{"loc":{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":80,"column":9}},{"start":{"line":78,"column":8},"end":{"line":80,"column":9}}],"line":78},"26":{"loc":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},{"start":{"line":86,"column":8},"end":{"line":88,"column":9}}],"line":86},"27":{"loc":{"start":{"line":91,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":8},"end":{"line":110,"column":9}},{"start":{"line":91,"column":8},"end":{"line":110,"column":9}}],"line":91},"28":{"loc":{"start":{"line":94,"column":13},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":13},"end":{"line":110,"column":9}},{"start":{"line":94,"column":13},"end":{"line":110,"column":9}}],"line":94},"29":{"loc":{"start":{"line":95,"column":12},"end":{"line":97,"column":13}},"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":97,"column":13}},{"start":{"line":95,"column":12},"end":{"line":97,"column":13}}],"line":95},"30":{"loc":{"start":{"line":95,"column":16},"end":{"line":95,"column":65}},"type":"binary-expr","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":22}},{"start":{"line":95,"column":26},"end":{"line":95,"column":43}},{"start":{"line":95,"column":47},"end":{"line":95,"column":65}}],"line":95},"31":{"loc":{"start":{"line":98,"column":12},"end":{"line":100,"column":13}},"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":100,"column":13}},{"start":{"line":98,"column":12},"end":{"line":100,"column":13}}],"line":98},"32":{"loc":{"start":{"line":98,"column":16},"end":{"line":98,"column":84}},"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":45}},{"start":{"line":98,"column":49},"end":{"line":98,"column":84}}],"line":98},"33":{"loc":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},{"start":{"line":101,"column":12},"end":{"line":103,"column":13}}],"line":101},"34":{"loc":{"start":{"line":101,"column":16},"end":{"line":101,"column":69}},"type":"binary-expr","locations":[{"start":{"line":101,"column":16},"end":{"line":101,"column":42}},{"start":{"line":101,"column":46},"end":{"line":101,"column":69}}],"line":101},"35":{"loc":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},{"start":{"line":113,"column":8},"end":{"line":115,"column":9}}],"line":113},"36":{"loc":{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":118,"column":9}},{"start":{"line":116,"column":8},"end":{"line":118,"column":9}}],"line":116},"37":{"loc":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},{"start":{"line":119,"column":8},"end":{"line":121,"column":9}}],"line":119},"38":{"loc":{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":124,"column":9}},{"start":{"line":122,"column":8},"end":{"line":124,"column":9}}],"line":122},"39":{"loc":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},{"start":{"line":125,"column":8},"end":{"line":127,"column":9}}],"line":125},"40":{"loc":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},{"start":{"line":129,"column":12},"end":{"line":131,"column":13}}],"line":129},"41":{"loc":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},{"start":{"line":138,"column":8},"end":{"line":140,"column":9}}],"line":138},"42":{"loc":{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},"type":"if","locations":[{"start":{"line":144,"column":8},"end":{"line":146,"column":9}},{"start":{"line":144,"column":8},"end":{"line":146,"column":9}}],"line":144},"43":{"loc":{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":149,"column":9}},{"start":{"line":147,"column":8},"end":{"line":149,"column":9}}],"line":147},"44":{"loc":{"start":{"line":152,"column":8},"end":{"line":154,"column":9}},"type":"if","locations":[{"start":{"line":152,"column":8},"end":{"line":154,"column":9}},{"start":{"line":152,"column":8},"end":{"line":154,"column":9}}],"line":152},"45":{"loc":{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":157,"column":9}},{"start":{"line":155,"column":8},"end":{"line":157,"column":9}}],"line":155},"46":{"loc":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},{"start":{"line":158,"column":8},"end":{"line":160,"column":9}}],"line":158},"47":{"loc":{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},"type":"if","locations":[{"start":{"line":167,"column":8},"end":{"line":169,"column":9}},{"start":{"line":167,"column":8},"end":{"line":169,"column":9}}],"line":167},"48":{"loc":{"start":{"line":167,"column":12},"end":{"line":167,"column":67}},"type":"binary-expr","locations":[{"start":{"line":167,"column":12},"end":{"line":167,"column":39}},{"start":{"line":167,"column":43},"end":{"line":167,"column":67}}],"line":167},"49":{"loc":{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},"type":"if","locations":[{"start":{"line":176,"column":8},"end":{"line":178,"column":9}},{"start":{"line":176,"column":8},"end":{"line":178,"column":9}}],"line":176},"50":{"loc":{"start":{"line":176,"column":12},"end":{"line":176,"column":77}},"type":"binary-expr","locations":[{"start":{"line":176,"column":12},"end":{"line":176,"column":45}},{"start":{"line":176,"column":49},"end":{"line":176,"column":77}}],"line":176},"51":{"loc":{"start":{"line":186,"column":8},"end":{"line":188,"column":9}},"type":"if","locations":[{"start":{"line":186,"column":8},"end":{"line":188,"column":9}},{"start":{"line":186,"column":8},"end":{"line":188,"column":9}}],"line":186},"52":{"loc":{"start":{"line":186,"column":12},"end":{"line":186,"column":73}},"type":"binary-expr","locations":[{"start":{"line":186,"column":12},"end":{"line":186,"column":43}},{"start":{"line":186,"column":47},"end":{"line":186,"column":73}}],"line":186},"53":{"loc":{"start":{"line":190,"column":8},"end":{"line":192,"column":9}},"type":"if","locations":[{"start":{"line":190,"column":8},"end":{"line":192,"column":9}},{"start":{"line":190,"column":8},"end":{"line":192,"column":9}}],"line":190},"54":{"loc":{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},"type":"if","locations":[{"start":{"line":193,"column":8},"end":{"line":195,"column":9}},{"start":{"line":193,"column":8},"end":{"line":195,"column":9}}],"line":193},"55":{"loc":{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},"type":"if","locations":[{"start":{"line":197,"column":8},"end":{"line":199,"column":9}},{"start":{"line":197,"column":8},"end":{"line":199,"column":9}}],"line":197},"56":{"loc":{"start":{"line":205,"column":8},"end":{"line":207,"column":9}},"type":"if","locations":[{"start":{"line":205,"column":8},"end":{"line":207,"column":9}},{"start":{"line":205,"column":8},"end":{"line":207,"column":9}}],"line":205},"57":{"loc":{"start":{"line":205,"column":12},"end":{"line":205,"column":73}},"type":"binary-expr","locations":[{"start":{"line":205,"column":12},"end":{"line":205,"column":43}},{"start":{"line":205,"column":47},"end":{"line":205,"column":73}}],"line":205},"58":{"loc":{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":211,"column":9}},{"start":{"line":209,"column":8},"end":{"line":211,"column":9}}],"line":209},"59":{"loc":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},{"start":{"line":212,"column":8},"end":{"line":214,"column":9}}],"line":212},"60":{"loc":{"start":{"line":216,"column":8},"end":{"line":218,"column":9}},"type":"if","locations":[{"start":{"line":216,"column":8},"end":{"line":218,"column":9}},{"start":{"line":216,"column":8},"end":{"line":218,"column":9}}],"line":216},"61":{"loc":{"start":{"line":224,"column":31},"end":{"line":224,"column":55}},"type":"binary-expr","locations":[{"start":{"line":224,"column":31},"end":{"line":224,"column":49}},{"start":{"line":224,"column":53},"end":{"line":224,"column":55}}],"line":224},"62":{"loc":{"start":{"line":225,"column":8},"end":{"line":229,"column":9}},"type":"if","locations":[{"start":{"line":225,"column":8},"end":{"line":229,"column":9}},{"start":{"line":225,"column":8},"end":{"line":229,"column":9}}],"line":225},"63":{"loc":{"start":{"line":225,"column":12},"end":{"line":226,"column":79}},"type":"binary-expr","locations":[{"start":{"line":225,"column":12},"end":{"line":225,"column":29}},{"start":{"line":225,"column":34},"end":{"line":225,"column":53}},{"start":{"line":225,"column":57},"end":{"line":225,"column":76}},{"start":{"line":225,"column":80},"end":{"line":225,"column":97}},{"start":{"line":226,"column":13},"end":{"line":226,"column":32}},{"start":{"line":226,"column":37},"end":{"line":226,"column":56}},{"start":{"line":226,"column":60},"end":{"line":226,"column":77}}],"line":225}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":366,"6":287,"7":275,"8":275,"9":60,"10":268,"11":233,"12":223,"13":200,"14":296,"15":296,"16":3,"17":293,"18":7,"19":286,"20":3,"21":283,"22":4,"23":279,"24":2,"25":472,"26":472,"27":6,"28":466,"29":466,"30":96,"31":370,"32":106,"33":264,"34":243,"35":21,"36":15,"37":6,"38":232,"39":232,"40":2,"41":230,"42":3,"43":227,"44":382,"45":2,"46":225,"47":4,"48":221,"49":615,"50":1,"51":220,"52":220,"53":610,"54":601,"55":211,"56":140,"57":149,"58":109,"59":40,"60":37,"61":4,"62":33,"63":2,"64":31,"65":1,"66":30,"67":38,"68":3,"69":68,"70":1,"71":67,"72":1,"73":66,"74":1,"75":65,"76":1,"77":64,"78":79,"79":1,"80":63,"81":77,"82":4,"83":59,"84":74,"85":82,"86":2,"87":80,"88":80,"89":78,"90":78,"91":1,"92":77,"93":2,"94":75,"95":75,"96":75,"97":2,"98":73,"99":1,"100":72,"101":2,"102":102,"103":102,"104":102,"105":102,"106":102,"107":4,"108":98,"109":213,"110":20,"111":20,"112":1,"113":19,"114":251,"115":251,"116":251,"117":251,"118":251,"119":1,"120":250,"121":250,"122":2,"123":248,"124":8,"125":239,"126":239,"127":12,"128":114,"129":114,"130":114,"131":114,"132":1,"133":113,"134":113,"135":2,"136":111,"137":10,"138":100,"139":100,"140":9,"141":91,"142":91,"143":91,"144":91,"145":91,"146":6,"147":1},"f":{"0":1,"1":287,"2":296,"3":472,"4":232,"5":615,"6":610,"7":149,"8":68,"9":79,"10":82,"11":102,"12":20,"13":251,"14":114,"15":91},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[60,215],"4":[233,35],"5":[3,293],"6":[296,63],"7":[7,286],"8":[3,283],"9":[4,279],"10":[283,281],"11":[2,277],"12":[279,278],"13":[6,466],"14":[96,370],"15":[466,396],"16":[106,264],"17":[243,21],"18":[15,6],"19":[2,230],"20":[3,227],"21":[2,380],"22":[382,155],"23":[4,221],"24":[225,224],"25":[1,220],"26":[140,71],"27":[109,40],"28":[37,3],"29":[4,33],"30":[37,37,34],"31":[2,31],"32":[33,33],"33":[1,30],"34":[31,30],"35":[1,67],"36":[1,66],"37":[1,65],"38":[1,64],"39":[1,63],"40":[4,73],"41":[2,80],"42":[1,77],"43":[2,75],"44":[2,73],"45":[1,72],"46":[2,70],"47":[4,98],"48":[102,101],"49":[1,19],"50":[20,19],"51":[1,250],"52":[251,250],"53":[2,248],"54":[8,239],"55":[12,227],"56":[1,113],"57":[114,113],"58":[2,111],"59":[10,100],"60":[9,91],"61":[91,53],"62":[6,85],"63":[91,90,21,13,88,16,14]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/models/QueryValidator.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/models/QueryValidator.ts"],"names":[],"mappings":"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","sourcesContent":["import {InsightError} from \"../controller/IInsightFacade\";\nimport KeyValidator from \"../utils/KeyValidator\";\nimport {\n\tLogic,\n\tLogicComparison,\n\tSComparison,\n\tMComparison,\n\tMComparator,\n\tSComparator,\n\tNegation,\n\tJSONQuery,\n} from \"./IQuery\";\n\nexport default class QueryValidator {\n\tprivate KV = new KeyValidator();\n\n\tpublic validateQuery(query: object): string {\n\t\tthis.validateQueryOutside(query);\n\t\tconst vQuery = query as JSONQuery;\n\t\tif (\"TRANSFORMATIONS\" in vQuery) {\n\t\t\tthis.validateTransformations(vQuery.TRANSFORMATIONS as object);\n\t\t}\n\n\t\tif (Object.keys(vQuery.WHERE as object).length !== 0) {\n\t\t\tthis.validateWhere(vQuery.WHERE as object);\n\t\t}\n\n\t\tthis.validateOptions(vQuery.OPTIONS);\n\t\treturn this.KV.getDatasetName();\n\t}\n\n\tpublic validateQueryOutside(query: object) {\n\t\tconst keys = Object.keys(query);\n\t\tif (keys.length > 2 && !(\"TRANSFORMATIONS\" in query)) {\n\t\t\tthrow new InsightError(\"Excess Keys in Query\");\n\t\t}\n\n\t\tif (!(\"WHERE\" in query)) {\n\t\t\tthrow new InsightError(\"Missing WHERE\");\n\t\t}\n\n\t\tif (!(\"OPTIONS\" in query)) {\n\t\t\tthrow new InsightError(\"Missing OPTIONS\");\n\t\t}\n\n\t\tif (typeof query.WHERE !== \"object\" || Array.isArray(query.WHERE)) {\n\t\t\tthrow new InsightError(\"Invalid WHERE type\");\n\t\t}\n\n\t\tif (typeof query.OPTIONS !== \"object\" || Array.isArray(query.OPTIONS)) {\n\t\t\tthrow new InsightError(\"Invalid OPTIONS type\");\n\t\t}\n\t}\n\n\tpublic validateWhere(where: object): void {\n\t\tconst keys = Object.keys(where);\n\t\tif (keys.length !== 1) {\n\t\t\tthrow new InsightError(\"Nested Filter must contain 1 key\");\n\t\t}\n\n\t\t// Check that key is one of the valid keys\n\t\tconst key = keys[0];\n\t\tif (key === \"AND\" || key === \"OR\") {\n\t\t\tthis.validateLogicComparison(where);\n\t\t} else if (key === \"IS\") {\n\t\t\tthis.validateSComparison(where);\n\t\t} else if ([\"LT\", \"GT\", \"EQ\"].includes(key)) {\n\t\t\tthis.validateMComparison(where);\n\t\t} else if (key === \"NOT\") {\n\t\t\tthis.validateNot(where);\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid key in WHERE\");\n\t\t}\n\t}\n\n\tpublic validateOptions(options: object): void {\n\t\tconst keys = Object.keys(options);\n\t\tif (keys.length > 2) {\n\t\t\tthrow new InsightError(\"Excess Keys in Options\");\n\t\t}\n\n\t\t// Check that options has COLUMNS\n\t\tif (!(\"COLUMNS\" in options)) {\n\t\t\tthrow new InsightError(\"Options missing COLUMNS\");\n\t\t}\n\n        // Check for invalid keys\n\t\tfor (const key of keys) {\n\t\t\tif (key !== \"COLUMNS\" && key !== \"ORDER\") {\n\t\t\t\tthrow new InsightError(\"Options contains invalid keys\");\n\t\t\t}\n\t\t}\n\n\t\t// Check columns is nonempty array\n\t\tif (!Array.isArray(options.COLUMNS) || options.COLUMNS.length === 0) {\n\t\t\tthrow new InsightError(\"COLUMNS must be non-empty array\");\n\t\t}\n\t\tif (!options.COLUMNS.every((key) => typeof key === \"string\")) {\n\t\t\tthrow new InsightError(\"All elements in COLUMNS must be strings\");\n\t\t}\n\n\t\t// Validate keys in columns\n\t\tconst allColumnKeys: string[] = [];\n\t\toptions.COLUMNS.forEach((columnKey: string) => {\n\t\t\tthis.KV.validateColumnKey(columnKey);\n\t\t\tallColumnKeys.push(columnKey);\n\t\t});\n\n\t\tif (\"ORDER\" in options) {\n\t\t\tthis.validateOrder(options.ORDER, allColumnKeys);\n\t\t}\n\t}\n\n\tpublic validateOrder(order: unknown, columnKeys: string[]) {\n\t\tif (typeof order === \"string\") {\n\t\t\tthis.KV.validateOrderKey(order, columnKeys);\n\t\t} else if (typeof order === \"object\") {\n\t\t\tif (!order || !(\"dir\" in order) || !(\"keys\" in order)) {\n\t\t\t\tthrow new InsightError(\"Invalid Order structure\");\n\t\t\t}\n\t\t\tif (typeof order.dir !== \"string\" || ![\"DOWN\", \"UP\"].includes(order.dir)) {\n\t\t\t\tthrow new InsightError(\"Invalid ORDER direction.\");\n\t\t\t}\n            // Check if order.keys is an array\n\t\t\tif (!Array.isArray(order.keys) || order.keys.length === 0) {\n\t\t\t\tthrow new InsightError(\"ORDER keys must be a non-empty array\");\n\t\t\t}\n            // Check if each element of order.keys is a string and is present in columnKeys\n\t\t\tfor (const key of order.keys) {\n\t\t\t\tthis.KV.validateOrderKey(key, columnKeys);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid Order type. Must be string or object.\");\n\t\t}\n\t}\n\n\tpublic validateTransformations(transformations: object): void {\n\t\tif (!(\"GROUP\" in transformations)) {\n\t\t\tthrow new InsightError(\"TRANSFORMATIONS missing GROUP\");\n\t\t}\n\t\tif (!(\"APPLY\" in transformations)) {\n\t\t\tthrow new InsightError(\"TRANSFORMATIONS missing APPLY\");\n\t\t}\n\t\tif (!Array.isArray(transformations.GROUP)) {\n\t\t\tthrow new InsightError(\"GROUP must be a non-empty array\");\n\t\t}\n\t\tif (!Array.isArray(transformations.APPLY)) {\n\t\t\tthrow new InsightError(\"APPLY must be a non-empty array\");\n\t\t}\n\t\tif (!transformations.GROUP.every((key: any) => typeof key === \"string\")) {\n\t\t\tthrow new InsightError(\"All elements in GROUP must be strings\");\n\t\t}\n\t\tfor (let key of transformations.GROUP) {\n\t\t\tif (!this.KV.validateGroupKey(key)) {\n\t\t\t\tthrow new InsightError(\"Invalid key in GROUP: \" + key);\n\t\t\t}\n\t\t}\n\n\t\tfor (let rule of transformations.APPLY) {\n\t\t\tthis.validateApplyRule(rule);\n\t\t}\n\t}\n\n\tpublic validateApplyRule(rule: any): void {\n\t\tif (Object.keys(rule).length > 1) {\n\t\t\tthrow new InsightError(`Apply rule should only have 1 key, has ${Object.keys(rule).length}`);\n\t\t}\n\n\t\tconst applyKey = Object.keys(rule)[0];\n\t\tthis.KV.validateApplyKey(applyKey);\n\t\tconst applyValue = rule[applyKey];\n\n\t\tif (typeof applyValue !== \"object\") {\n\t\t\tthrow new InsightError(\"Apply body must be object\");\n\t\t}\n\t\tif (Object.keys(applyValue).length !== 1) {\n\t\t\tthrow new InsightError(`Apply body should only have 1 key, has ${Object.keys(applyValue).length}`);\n\t\t}\n\n\t\t// Check for valid transformation operators\n\t\tconst token = Object.keys(applyValue)[0];\n\t\tconst validTokens = [\"MAX\", \"MIN\", \"AVG\", \"COUNT\", \"SUM\"];\n\t\tif (!validTokens.includes(token)) {\n\t\t\tthrow new InsightError(\"Invalid transformation operator\");\n\t\t}\n\t\tif (typeof applyValue[token] !== \"string\") {\n\t\t\tthrow new InsightError(\"Invalid apply rule target key\");\n\t\t}\n\t\tif (!this.KV.validateApplyRuleTargetKey(applyValue[token])) {\n\t\t\tthrow new InsightError(`Invalid key in ${token}: ${applyValue[token]}`);\n\t\t}\n\t}\n\n\tpublic validateLogicComparison(object: object): void {\n\t\tconst logicComparison = object as LogicComparison;\n\t\tconst logicComparatorKeys = Object.keys(logicComparison);\n\t\tconst comparator = logicComparatorKeys[0] as Logic;\n\n\t\tconst fieldObject = logicComparison[comparator];\n\t\tif (!Array.isArray(fieldObject) || fieldObject.length === 0) {\n\t\t\tthrow new InsightError(`${comparator} should be non-empty array`);\n\t\t}\n\n\t\tfor (const filter of fieldObject) {\n\t\t\tthis.validateWhere(filter as object); // recursively validate each filter in the array\n\t\t}\n\t}\n\n\tpublic validateNot(object: object): void {\n\t\tconst notObject = object as Negation;\n\t\tif (typeof notObject.NOT !== \"object\" || Array.isArray(notObject.NOT)) {\n\t\t\tthrow new InsightError(\"NOT value must be object\");\n\t\t}\n\t\tthis.validateWhere(notObject.NOT as object);\n\t}\n\n\tpublic validateMComparison(object: object): void {\n\t\tconst mComparison = object as MComparison;\n\t\tconst mComparatorKeys = Object.keys(mComparison);\n\t\tconst comparator = mComparatorKeys[0] as MComparator;\n\n\t\tconst fieldObject = mComparison[comparator];\n\t\tif (typeof fieldObject !== \"object\" || Array.isArray(fieldObject)) {\n\t\t\tthrow new InsightError(`${comparator} value has invalid type`);\n\t\t}\n\n\t\tconst fieldKeys = Object.keys(fieldObject);\n\t\tif (fieldKeys.length !== 1) {\n\t\t\tthrow new InsightError(`${comparator} must have exactly one key`);\n\t\t}\n\n\t\tif (!this.KV.validateMKey(fieldKeys[0])) {\n\t\t\tthrow new InsightError(`Invalid key in ${comparator}: ${fieldKeys[0]}`);\n\t\t}\n\n\t\tconst fieldValue = fieldObject[fieldKeys[0]];\n\t\tif (typeof fieldValue !== \"number\") {\n\t\t\tthrow new InsightError(`Invalid value for ${fieldKeys[0]} in MComparison. Expected a number`);\n\t\t}\n\t}\n\n\tpublic validateSComparison(object: object): void {\n\t\tconst sComparison = object as SComparison;\n\t\tconst comparator = Object.keys(sComparison)[0] as SComparator;\n\n\t\tconst fieldObject = sComparison[comparator];\n\t\tif (typeof fieldObject !== \"object\" || Array.isArray(fieldObject)) {\n\t\t\tthrow new InsightError(`SComparison for ${comparator} has invalid type`);\n\t\t}\n\n\t\tconst fieldKeys = Object.keys(fieldObject);\n\t\tif (fieldKeys.length !== 1) {\n\t\t\tthrow new InsightError(`${comparator} must have exactly one key`);\n\t\t}\n\n\t\tif (!this.KV.validateSKey(fieldKeys[0])) {\n\t\t\tthrow new InsightError(`Invalid key in IS: ${fieldKeys[0]}`);\n\t\t}\n\n\t\tconst fieldValue = fieldObject[fieldKeys[0]];\n\t\tif (typeof fieldValue !== \"string\") {\n\t\t\tthrow new InsightError(`Invalid value type for ${fieldKeys[0]} in IS. Expected a string`);\n\t\t}\n\n\t\tthis.validateWildcardUsage(fieldValue);\n\t}\n\n\tprivate validateWildcardUsage(value: string): void {\n\t\tconst startsWithAsterisk = value.startsWith(\"*\");\n\t\tconst endsWithAsterisk = value.endsWith(\"*\");\n\t\tconst asteriskCount = (value.match(/\\*/g) || []).length;\n\n\t\tif (\n\t\t\tasteriskCount > 2 || (asteriskCount === 1 && !startsWithAsterisk && !endsWithAsterisk) ||\n\t\t\t(asteriskCount === 2 && (!startsWithAsterisk || !endsWithAsterisk))\n\t\t) {\n\t\t\tthrow new InsightError(\n\t\t\t\t\"Invalid usage of wildcards in string. A valid string\" +\n\t\t\t\t\t\" can only start with or end with an asterisk, or both.\"\n\t\t\t);\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b4b4f140f9a9b7da340e35f13a79140d0fa9e287","contentHash":"da903f424964c9aa895311fa8b1359fb6dc4baa5874b376bbae7fb3b4ff5b3ee"},"/Users/han/code/cpsc310/c1/project_team123/src/utils/KeyValidator.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/utils/KeyValidator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":64}},"2":{"start":{"line":8,"column":8},"end":{"line":8,"column":26}},"3":{"start":{"line":9,"column":8},"end":{"line":9,"column":44}},"4":{"start":{"line":12,"column":8},"end":{"line":12,"column":28}},"5":{"start":{"line":15,"column":8},"end":{"line":15,"column":43}},"6":{"start":{"line":18,"column":28},"end":{"line":18,"column":78}},"7":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"8":{"start":{"line":20,"column":12},"end":{"line":20,"column":25}},"9":{"start":{"line":22,"column":8},"end":{"line":22,"column":44}},"10":{"start":{"line":23,"column":8},"end":{"line":23,"column":20}},"11":{"start":{"line":26,"column":28},"end":{"line":26,"column":128}},"12":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"13":{"start":{"line":28,"column":12},"end":{"line":28,"column":25}},"14":{"start":{"line":30,"column":8},"end":{"line":30,"column":44}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":20}},"16":{"start":{"line":34,"column":30},"end":{"line":34,"column":46}},"17":{"start":{"line":35,"column":8},"end":{"line":40,"column":9}},"18":{"start":{"line":36,"column":12},"end":{"line":36,"column":39}},"19":{"start":{"line":38,"column":13},"end":{"line":40,"column":9}},"20":{"start":{"line":39,"column":12},"end":{"line":39,"column":91}},"21":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"22":{"start":{"line":44,"column":12},"end":{"line":44,"column":25}},"23":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"24":{"start":{"line":47,"column":12},"end":{"line":47,"column":25}},"25":{"start":{"line":49,"column":8},"end":{"line":49,"column":43}},"26":{"start":{"line":50,"column":8},"end":{"line":50,"column":20}},"27":{"start":{"line":53,"column":8},"end":{"line":61,"column":9}},"28":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"29":{"start":{"line":55,"column":16},"end":{"line":55,"column":133}},"30":{"start":{"line":57,"column":12},"end":{"line":57,"column":19}},"31":{"start":{"line":59,"column":13},"end":{"line":61,"column":9}},"32":{"start":{"line":60,"column":12},"end":{"line":60,"column":92}},"33":{"start":{"line":64,"column":8},"end":{"line":64,"column":68}},"34":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"35":{"start":{"line":68,"column":12},"end":{"line":68,"column":89}},"36":{"start":{"line":72,"column":24},"end":{"line":72,"column":33}},"37":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"38":{"start":{"line":74,"column":12},"end":{"line":74,"column":90}},"39":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"40":{"start":{"line":77,"column":12},"end":{"line":77,"column":87}},"41":{"start":{"line":79,"column":8},"end":{"line":79,"column":46}},"42":{"start":{"line":82,"column":0},"end":{"line":82,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":18},"end":{"line":10,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":21},"end":{"line":13,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":35},"end":{"line":16,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":24},"end":{"line":24,"column":5}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":24},"end":{"line":32,"column":5}},"line":25},"5":{"name":"(anonymous_5)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":35},"end":{"line":41,"column":5}},"line":33},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":28},"end":{"line":51,"column":5}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":33},"end":{"line":62,"column":5}},"line":52},"8":{"name":"(anonymous_8)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":38},"end":{"line":65,"column":5}},"line":63},"9":{"name":"(anonymous_9)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":38},"end":{"line":70,"column":5}},"line":66},"10":{"name":"(anonymous_10)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":31},"end":{"line":80,"column":5}},"line":71}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"1":{"loc":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},{"start":{"line":27,"column":8},"end":{"line":29,"column":9}}],"line":27},"2":{"loc":{"start":{"line":35,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":40,"column":9}},{"start":{"line":35,"column":8},"end":{"line":40,"column":9}}],"line":35},"3":{"loc":{"start":{"line":38,"column":13},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":13},"end":{"line":40,"column":9}},{"start":{"line":38,"column":13},"end":{"line":40,"column":9}}],"line":38},"4":{"loc":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},{"start":{"line":43,"column":8},"end":{"line":45,"column":9}}],"line":43},"5":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{"line":46,"column":8},"end":{"line":48,"column":9}}],"line":46},"6":{"loc":{"start":{"line":46,"column":12},"end":{"line":46,"column":66}},"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":37}},{"start":{"line":46,"column":41},"end":{"line":46,"column":66}}],"line":46},"7":{"loc":{"start":{"line":53,"column":8},"end":{"line":61,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":61,"column":9}},{"start":{"line":53,"column":8},"end":{"line":61,"column":9}}],"line":53},"8":{"loc":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},{"start":{"line":54,"column":12},"end":{"line":56,"column":13}}],"line":54},"9":{"loc":{"start":{"line":59,"column":13},"end":{"line":61,"column":9}},"type":"if","locations":[{"start":{"line":59,"column":13},"end":{"line":61,"column":9}},{"start":{"line":59,"column":13},"end":{"line":61,"column":9}}],"line":59},"10":{"loc":{"start":{"line":59,"column":17},"end":{"line":59,"column":79}},"type":"binary-expr","locations":[{"start":{"line":59,"column":17},"end":{"line":59,"column":46}},{"start":{"line":59,"column":50},"end":{"line":59,"column":79}}],"line":59},"11":{"loc":{"start":{"line":64,"column":15},"end":{"line":64,"column":67}},"type":"binary-expr","locations":[{"start":{"line":64,"column":15},"end":{"line":64,"column":39}},{"start":{"line":64,"column":43},"end":{"line":64,"column":67}}],"line":64},"12":{"loc":{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":8},"end":{"line":69,"column":9}},{"start":{"line":67,"column":8},"end":{"line":69,"column":9}}],"line":67},"13":{"loc":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},{"start":{"line":73,"column":8},"end":{"line":75,"column":9}}],"line":73},"14":{"loc":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},{"start":{"line":76,"column":8},"end":{"line":78,"column":9}}],"line":76}},"s":{"0":1,"1":1,"2":384,"3":384,"4":200,"5":1,"6":899,"7":899,"8":344,"9":555,"10":554,"11":448,"12":448,"13":25,"14":423,"15":418,"16":978,"17":978,"18":280,"19":698,"20":6,"21":83,"22":1,"23":82,"24":7,"25":75,"26":75,"27":610,"28":120,"29":3,"30":117,"31":490,"32":2,"33":75,"34":147,"35":7,"36":81,"37":81,"38":1,"39":80,"40":2,"41":78,"42":1},"f":{"0":384,"1":200,"2":1,"3":899,"4":448,"5":978,"6":83,"7":610,"8":75,"9":147,"10":81},"b":{"0":[344,555],"1":[25,423],"2":[280,698],"3":[6,692],"4":[1,82],"5":[7,75],"6":[82,31],"7":[120,490],"8":[3,117],"9":[2,484],"10":[490,296],"11":[75,6],"12":[7,140],"13":[1,80],"14":[2,78]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/utils/KeyValidator.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/utils/KeyValidator.ts"],"names":[],"mappings":";;AAAA,iEAA8E;AAK9E,MAAqB,YAAY;IACxB,OAAO,CAAS;IAChB,kBAAkB,CAAc;IAMxC;QACC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;IACrC,CAAC;IAKM,cAAc;QACpB,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAOM,uBAAuB,CAAC,KAAa;QAC3C,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAOM,YAAY,CAAC,KAAa;QAChC,MAAM,WAAW,GAAG,kDAAkD,CAAC;QACvE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;IACb,CAAC;IAOM,YAAY,CAAC,KAAa;QAChC,MAAM,WAAW,GAChB,oGAAoG,CAAC;QACtG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;IACb,CAAC;IAOM,uBAAuB,CAAC,KAAa;QAC3C,MAAM,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,IAAI,CAAC,OAAO,KAAK,EAAE,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;SAC3B;aAAM,IAAI,IAAI,CAAC,OAAO,KAAK,WAAW,EAAE;YACxC,MAAM,IAAI,6BAAY,CAAC,qCAAqC,CAAC,CAAC;SAC9D;IACF,CAAC;IAOM,gBAAgB,CAAC,KAAyB;QAChD,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YACjC,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC3D,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IACb,CAAC;IAOM,iBAAiB,CAAC,SAAiB;QACzC,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,EAAE;YACvC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAC5C,MAAM,IAAI,6BAAY,CAAC,2EAA2E,CAAC,CAAC;aACpG;YACD,OAAO;SACP;aAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;YAC1E,MAAM,IAAI,6BAAY,CAAC,2BAA2B,SAAS,EAAE,CAAC,CAAC;SAC/D;IACF,CAAC;IAOM,0BAA0B,CAAC,KAAa;QAC9C,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IAQM,gBAAgB,CAAC,GAAQ,EAAE,UAAoB;QACrD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC9B,MAAM,IAAI,6BAAY,CAAC,mCAAmC,CAAC,CAAC;SAC5D;IACF,CAAC;IAOM,gBAAgB,CAAC,QAAgB;QACvC,MAAM,OAAO,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC5B,MAAM,IAAI,6BAAY,CAAC,oCAAoC,CAAC,CAAC;SAC7D;QACD,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC1C,MAAM,IAAI,6BAAY,CAAC,uBAAuB,QAAQ,EAAE,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;CACD;AA5ID,+BA4IC","sourcesContent":["import {InsightDatasetKind, InsightError} from \"../controller/IInsightFacade\";\n\n/**\n * KeyValidator class to handle key validation and dataset name management.\n */\nexport default class KeyValidator {\n\tprivate dataset: string;\n\tprivate transformationKeys: Set<string>;\n\n\t/**\n\t * Initializes the dataset name as an empty string\n\t * and the transformation keys as an empty set.\n\t */\n\tconstructor() {\n\t\tthis.dataset = \"\";\n\t\tthis.transformationKeys = new Set();\n\t}\n\n\t/**\n\t * @return {string} The current dataset name.\n\t */\n\tpublic getDatasetName(): string {\n\t\treturn this.dataset;\n\t}\n\n\t/**\n\t * Adds a key to the transformationKeys set.\n\t * Used for testing purposes.\n\t * @param {string} input - Key to add to the transformation keys.\n\t */\n\tpublic addToTransformationKeys(input: string) {\n\t\tthis.transformationKeys.add(input);\n\t}\n\n\t/**\n\t * Validates a MKey (metric key).\n\t * @param {string} input - The MKey to validate.\n\t * @return {boolean} True if the key is valid, false otherwise.\n\t */\n\tpublic validateMKey(input: string): boolean {\n\t\tconst mKeyPattern = /^[^_]+_(avg|pass|fail|audit|year|lat|lon|seats)$/;\n\t\tif (!mKeyPattern.test(input)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.checkForMultipleDataset(input);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Validates a SKey (string key).\n\t * @param {string} input - The SKey to validate.\n\t * @return {boolean} True if the key is valid, false otherwise.\n\t */\n\tpublic validateSKey(input: string): boolean {\n\t\tconst sKeyPattern =\n\t\t\t/^[^_]+_(dept|id|instructor|title|uuid|fullname|shortname|number|name|address|type|furniture|href)$/;\n\t\tif (!sKeyPattern.test(input)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.checkForMultipleDataset(input);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Checks if the input key is from a different dataset.\n\t * @param {string} input - The key to check.\n\t * @throws {InsightError} If the key is from a different dataset.\n\t */\n\tpublic checkForMultipleDataset(input: string): void {\n\t\tconst [contentName] = input.split(\"_\");\n\t\tif (this.dataset === \"\") {\n\t\t\tthis.dataset = contentName;\n\t\t} else if (this.dataset !== contentName) {\n\t\t\tthrow new InsightError(\"Cannot query from multiple datasets\");\n\t\t}\n\t}\n\n\t/**\n\t * Validates a key used in the GROUP of a TRANSFORMATION.\n\t * @param {string | undefined} input - The key to validate.\n\t * @return {boolean} True if valid, false otherwise.\n\t */\n\tpublic validateGroupKey(input: string | undefined): boolean {\n\t\tif (typeof input === \"undefined\") {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.validateMKey(input) && !this.validateSKey(input)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.transformationKeys.add(input);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Validates a key used in the COLUMNS of a query.\n\t * @param {string} columnKey - The column key to validate.\n\t * @throws {InsightError} If the key is invalid.\n\t */\n\tpublic validateColumnKey(columnKey: string) {\n\t\tif (this.transformationKeys.size !== 0) {\n\t\t\tif (!this.transformationKeys.has(columnKey)) {\n\t\t\t\tthrow new InsightError(\"Keys in COLUMNS must be in GROUP or APPLY when TRANSFORMATIONS is present\");\n\t\t\t}\n\t\t\treturn;\n\t\t} else if (!this.validateMKey(columnKey) && !this.validateSKey(columnKey)) {\n\t\t\tthrow new InsightError(`Invalid key in COLUMNS: ${columnKey}`);\n\t\t}\n\t}\n\n\t/**\n\t * Validates a target key used in an APPLY rule.\n\t * @param {string} input - The target key to validate.\n\t * @return {boolean} True if the key is valid, false otherwise.\n\t */\n\tpublic validateApplyRuleTargetKey(input: string) {\n\t\treturn this.validateMKey(input) || this.validateSKey(input);\n\t}\n\n\t/**\n\t * Validates that a key used in ORDER is present in the COLUMNS of a query.\n\t * @param {any} key - The key to validate.\n\t * @param {string[]} columnKeys - List of keys from the COLUMNS of a query.\n\t * @throws {InsightError} If the key is not present in the columnKeys.\n\t */\n\tpublic validateOrderKey(key: any, columnKeys: string[]) {\n\t\tif (!columnKeys.includes(key)) {\n\t\t\tthrow new InsightError(\"All ORDER keys must be in COLUMNS\");\n\t\t}\n\t}\n\n\t/**\n\t * Validates a key used in APPLY.\n\t * @param {string} applyKey - The apply key to validate.\n\t * @throws {InsightError} If the key is invalid or not unique.\n\t */\n\tpublic validateApplyKey(applyKey: string): void {\n\t\tconst pattern = /^[^_]+$/;\n\t\tif (!pattern.test(applyKey)) {\n\t\t\tthrow new InsightError(\"Cannot have underscore in applyKey\");\n\t\t}\n\t\tif (this.transformationKeys.has(applyKey)) {\n\t\t\tthrow new InsightError(`Duplicate APPLY key ${applyKey}`);\n\t\t}\n\t\tthis.transformationKeys.add(applyKey);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a2ddb771008d88ceda9e7566fc766bed73b3c36f","contentHash":"8c696d3e86835390878fcf8ff243a68da479d80be874f1373a717dea71995ed2"},"/Users/han/code/cpsc310/c1/project_team123/src/models/Query.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/models/Query.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":0},"end":{"line":29,"column":23}},"28":{"start":{"line":30,"column":25},"end":{"line":30,"column":64}},"29":{"start":{"line":31,"column":11},"end":{"line":31,"column":44}},"30":{"start":{"line":32,"column":25},"end":{"line":32,"column":69}},"31":{"start":{"line":33,"column":19},"end":{"line":33,"column":57}},"32":{"start":{"line":34,"column":21},"end":{"line":34,"column":51}},"33":{"start":{"line":35,"column":16},"end":{"line":35,"column":51}},"34":{"start":{"line":41,"column":16},"end":{"line":41,"column":24}},"35":{"start":{"line":44,"column":17},"end":{"line":44,"column":47}},"36":{"start":{"line":45,"column":8},"end":{"line":45,"column":55}},"37":{"start":{"line":46,"column":8},"end":{"line":46,"column":37}},"38":{"start":{"line":47,"column":8},"end":{"line":47,"column":41}},"39":{"start":{"line":48,"column":8},"end":{"line":48,"column":57}},"40":{"start":{"line":49,"column":8},"end":{"line":49,"column":30}},"41":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"42":{"start":{"line":53,"column":12},"end":{"line":53,"column":121}},"43":{"start":{"line":55,"column":8},"end":{"line":55,"column":24}},"44":{"start":{"line":56,"column":27},"end":{"line":56,"column":55}},"45":{"start":{"line":57,"column":32},"end":{"line":57,"column":34}},"46":{"start":{"line":58,"column":27},"end":{"line":58,"column":52}},"47":{"start":{"line":59,"column":8},"end":{"line":64,"column":11}},"48":{"start":{"line":60,"column":26},"end":{"line":60,"column":51}},"49":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"50":{"start":{"line":62,"column":16},"end":{"line":62,"column":44}},"51":{"start":{"line":65,"column":31},"end":{"line":65,"column":74}},"52":{"start":{"line":66,"column":8},"end":{"line":66,"column":50}},"53":{"start":{"line":69,"column":23},"end":{"line":69,"column":89}},"54":{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},"55":{"start":{"line":71,"column":12},"end":{"line":71,"column":58}},"56":{"start":{"line":73,"column":13},"end":{"line":75,"column":9}},"57":{"start":{"line":74,"column":12},"end":{"line":74,"column":55}},"58":{"start":{"line":76,"column":8},"end":{"line":76,"column":52}},"59":{"start":{"line":79,"column":8},"end":{"line":100,"column":9}},"60":{"start":{"line":80,"column":12},"end":{"line":80,"column":107}},"61":{"start":{"line":82,"column":13},"end":{"line":100,"column":9}},"62":{"start":{"line":83,"column":12},"end":{"line":83,"column":53}},"63":{"start":{"line":85,"column":13},"end":{"line":100,"column":9}},"64":{"start":{"line":86,"column":12},"end":{"line":86,"column":49}},"65":{"start":{"line":88,"column":13},"end":{"line":100,"column":9}},"66":{"start":{"line":89,"column":12},"end":{"line":89,"column":49}},"67":{"start":{"line":91,"column":13},"end":{"line":100,"column":9}},"68":{"start":{"line":92,"column":12},"end":{"line":92,"column":46}},"69":{"start":{"line":95,"column":24},"end":{"line":95,"column":33}},"70":{"start":{"line":96,"column":12},"end":{"line":98,"column":15}},"71":{"start":{"line":97,"column":16},"end":{"line":97,"column":121}},"72":{"start":{"line":99,"column":12},"end":{"line":99,"column":23}},"73":{"start":{"line":103,"column":8},"end":{"line":106,"column":9}},"74":{"start":{"line":104,"column":30},"end":{"line":104,"column":56}},"75":{"start":{"line":105,"column":12},"end":{"line":105,"column":47}},"76":{"start":{"line":107,"column":8},"end":{"line":107,"column":21}},"77":{"start":{"line":110,"column":26},"end":{"line":110,"column":35}},"78":{"start":{"line":111,"column":8},"end":{"line":120,"column":11}},"79":{"start":{"line":112,"column":26},"end":{"line":115,"column":25}},"80":{"start":{"line":113,"column":16},"end":{"line":113,"column":84}},"81":{"start":{"line":114,"column":16},"end":{"line":114,"column":61}},"82":{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},"83":{"start":{"line":117,"column":16},"end":{"line":117,"column":41}},"84":{"start":{"line":119,"column":12},"end":{"line":119,"column":46}},"85":{"start":{"line":121,"column":8},"end":{"line":121,"column":25}},"86":{"start":{"line":124,"column":24},"end":{"line":124,"column":26}},"87":{"start":{"line":125,"column":8},"end":{"line":135,"column":9}},"88":{"start":{"line":126,"column":27},"end":{"line":126,"column":29}},"89":{"start":{"line":127,"column":12},"end":{"line":127,"column":110}},"90":{"start":{"line":128,"column":34},"end":{"line":128,"column":58}},"91":{"start":{"line":129,"column":12},"end":{"line":133,"column":15}},"92":{"start":{"line":130,"column":28},"end":{"line":130,"column":45}},"93":{"start":{"line":131,"column":16},"end":{"line":131,"column":40}},"94":{"start":{"line":132,"column":16},"end":{"line":132,"column":47}},"95":{"start":{"line":134,"column":12},"end":{"line":134,"column":33}},"96":{"start":{"line":136,"column":8},"end":{"line":136,"column":23}},"97":{"start":{"line":139,"column":28},"end":{"line":139,"column":55}},"98":{"start":{"line":140,"column":31},"end":{"line":140,"column":40}},"99":{"start":{"line":141,"column":8},"end":{"line":145,"column":11}},"100":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"101":{"start":{"line":143,"column":16},"end":{"line":143,"column":132}},"102":{"start":{"line":146,"column":8},"end":{"line":146,"column":30}},"103":{"start":{"line":149,"column":32},"end":{"line":149,"column":41}},"104":{"start":{"line":150,"column":20},"end":{"line":150,"column":44}},"105":{"start":{"line":151,"column":8},"end":{"line":151,"column":76}},"106":{"start":{"line":152,"column":23},"end":{"line":152,"column":40}},"107":{"start":{"line":153,"column":23},"end":{"line":153,"column":36}},"108":{"start":{"line":154,"column":8},"end":{"line":178,"column":11}},"109":{"start":{"line":155,"column":12},"end":{"line":177,"column":13}},"110":{"start":{"line":156,"column":16},"end":{"line":156,"column":133}},"111":{"start":{"line":158,"column":17},"end":{"line":177,"column":13}},"112":{"start":{"line":159,"column":16},"end":{"line":161,"column":17}},"113":{"start":{"line":160,"column":20},"end":{"line":160,"column":137}},"114":{"start":{"line":163,"column":17},"end":{"line":177,"column":13}},"115":{"start":{"line":164,"column":16},"end":{"line":166,"column":17}},"116":{"start":{"line":165,"column":20},"end":{"line":165,"column":137}},"117":{"start":{"line":168,"column":17},"end":{"line":177,"column":13}},"118":{"start":{"line":169,"column":16},"end":{"line":171,"column":17}},"119":{"start":{"line":170,"column":20},"end":{"line":170,"column":137}},"120":{"start":{"line":174,"column":16},"end":{"line":176,"column":17}},"121":{"start":{"line":175,"column":20},"end":{"line":175,"column":137}},"122":{"start":{"line":179,"column":8},"end":{"line":179,"column":31}},"123":{"start":{"line":182,"column":32},"end":{"line":182,"column":41}},"124":{"start":{"line":183,"column":27},"end":{"line":183,"column":48}},"125":{"start":{"line":184,"column":30},"end":{"line":184,"column":47}},"126":{"start":{"line":185,"column":20},"end":{"line":185,"column":49}},"127":{"start":{"line":186,"column":8},"end":{"line":186,"column":76}},"128":{"start":{"line":187,"column":23},"end":{"line":187,"column":40}},"129":{"start":{"line":188,"column":23},"end":{"line":188,"column":54}},"130":{"start":{"line":189,"column":8},"end":{"line":199,"column":11}},"131":{"start":{"line":190,"column":12},"end":{"line":198,"column":13}},"132":{"start":{"line":191,"column":16},"end":{"line":191,"column":133}},"133":{"start":{"line":193,"column":17},"end":{"line":198,"column":13}},"134":{"start":{"line":194,"column":16},"end":{"line":194,"column":133}},"135":{"start":{"line":196,"column":17},"end":{"line":198,"column":13}},"136":{"start":{"line":197,"column":16},"end":{"line":197,"column":133}},"137":{"start":{"line":200,"column":8},"end":{"line":200,"column":31}},"138":{"start":{"line":203,"column":28},"end":{"line":203,"column":30}},"139":{"start":{"line":204,"column":25},"end":{"line":204,"column":46}},"140":{"start":{"line":205,"column":8},"end":{"line":207,"column":11}},"141":{"start":{"line":206,"column":12},"end":{"line":206,"column":59}},"142":{"start":{"line":208,"column":23},"end":{"line":208,"column":32}},"143":{"start":{"line":209,"column":8},"end":{"line":226,"column":9}},"144":{"start":{"line":210,"column":12},"end":{"line":210,"column":88}},"145":{"start":{"line":210,"column":58},"end":{"line":210,"column":86}},"146":{"start":{"line":211,"column":12},"end":{"line":218,"column":13}},"147":{"start":{"line":211,"column":25},"end":{"line":211,"column":26}},"148":{"start":{"line":212,"column":35},"end":{"line":212,"column":49}},"149":{"start":{"line":213,"column":16},"end":{"line":217,"column":17}},"150":{"start":{"line":214,"column":20},"end":{"line":216,"column":21}},"151":{"start":{"line":215,"column":24},"end":{"line":215,"column":56}},"152":{"start":{"line":221,"column":12},"end":{"line":225,"column":15}},"153":{"start":{"line":222,"column":16},"end":{"line":224,"column":19}},"154":{"start":{"line":223,"column":20},"end":{"line":223,"column":49}},"155":{"start":{"line":227,"column":8},"end":{"line":227,"column":22}},"156":{"start":{"line":230,"column":8},"end":{"line":232,"column":9}},"157":{"start":{"line":231,"column":12},"end":{"line":231,"column":88}},"158":{"start":{"line":233,"column":8},"end":{"line":240,"column":9}},"159":{"start":{"line":234,"column":12},"end":{"line":239,"column":13}},"160":{"start":{"line":235,"column":16},"end":{"line":235,"column":114}},"161":{"start":{"line":238,"column":16},"end":{"line":238,"column":118}},"162":{"start":{"line":241,"column":23},"end":{"line":252,"column":10}},"163":{"start":{"line":242,"column":28},"end":{"line":242,"column":30}},"164":{"start":{"line":243,"column":12},"end":{"line":250,"column":15}},"165":{"start":{"line":244,"column":26},"end":{"line":244,"column":32}},"166":{"start":{"line":245,"column":16},"end":{"line":248,"column":17}},"167":{"start":{"line":246,"column":20},"end":{"line":246,"column":88}},"168":{"start":{"line":247,"column":20},"end":{"line":247,"column":47}},"169":{"start":{"line":249,"column":16},"end":{"line":249,"column":45}},"170":{"start":{"line":251,"column":12},"end":{"line":251,"column":27}},"171":{"start":{"line":253,"column":8},"end":{"line":253,"column":22}},"172":{"start":{"line":256,"column":0},"end":{"line":256,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":27},"end":{"line":50,"column":5}},"line":43},"8":{"name":"(anonymous_8)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":14},"end":{"line":67,"column":5}},"line":51},"9":{"name":"(anonymous_9)","decl":{"start":{"line":59,"column":27},"end":{"line":59,"column":28}},"loc":{"start":{"line":59,"column":41},"end":{"line":64,"column":9}},"line":59},"10":{"name":"(anonymous_10)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":15},"end":{"line":77,"column":5}},"line":68},"11":{"name":"(anonymous_11)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":23},"end":{"line":101,"column":5}},"line":78},"12":{"name":"(anonymous_12)","decl":{"start":{"line":96,"column":41},"end":{"line":96,"column":42}},"loc":{"start":{"line":96,"column":52},"end":{"line":98,"column":13}},"line":96},"13":{"name":"(anonymous_13)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":33},"end":{"line":108,"column":5}},"line":102},"14":{"name":"(anonymous_14)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":36},"end":{"line":122,"column":5}},"line":109},"15":{"name":"(anonymous_15)","decl":{"start":{"line":111,"column":32},"end":{"line":111,"column":33}},"loc":{"start":{"line":111,"column":43},"end":{"line":120,"column":9}},"line":111},"16":{"name":"(anonymous_16)","decl":{"start":{"line":112,"column":58},"end":{"line":112,"column":59}},"loc":{"start":{"line":112,"column":67},"end":{"line":115,"column":13}},"line":112},"17":{"name":"(anonymous_17)","decl":{"start":{"line":123,"column":4},"end":{"line":123,"column":5}},"loc":{"start":{"line":123,"column":23},"end":{"line":137,"column":5}},"line":123},"18":{"name":"(anonymous_18)","decl":{"start":{"line":129,"column":30},"end":{"line":129,"column":31}},"loc":{"start":{"line":129,"column":41},"end":{"line":133,"column":13}},"line":129},"19":{"name":"(anonymous_19)","decl":{"start":{"line":138,"column":4},"end":{"line":138,"column":5}},"loc":{"start":{"line":138,"column":26},"end":{"line":147,"column":5}},"line":138},"20":{"name":"(anonymous_20)","decl":{"start":{"line":141,"column":37},"end":{"line":141,"column":38}},"loc":{"start":{"line":141,"column":48},"end":{"line":145,"column":9}},"line":141},"21":{"name":"(anonymous_21)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":29},"end":{"line":180,"column":5}},"line":148},"22":{"name":"(anonymous_22)","decl":{"start":{"line":154,"column":37},"end":{"line":154,"column":38}},"loc":{"start":{"line":154,"column":48},"end":{"line":178,"column":9}},"line":154},"23":{"name":"(anonymous_23)","decl":{"start":{"line":181,"column":4},"end":{"line":181,"column":5}},"loc":{"start":{"line":181,"column":29},"end":{"line":201,"column":5}},"line":181},"24":{"name":"(anonymous_24)","decl":{"start":{"line":189,"column":37},"end":{"line":189,"column":38}},"loc":{"start":{"line":189,"column":48},"end":{"line":199,"column":9}},"line":189},"25":{"name":"(anonymous_25)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":33},"end":{"line":228,"column":5}},"line":202},"26":{"name":"(anonymous_26)","decl":{"start":{"line":205,"column":33},"end":{"line":205,"column":34}},"loc":{"start":{"line":205,"column":49},"end":{"line":207,"column":9}},"line":205},"27":{"name":"(anonymous_27)","decl":{"start":{"line":210,"column":36},"end":{"line":210,"column":37}},"loc":{"start":{"line":210,"column":58},"end":{"line":210,"column":86}},"line":210},"28":{"name":"(anonymous_28)","decl":{"start":{"line":221,"column":32},"end":{"line":221,"column":33}},"loc":{"start":{"line":221,"column":45},"end":{"line":225,"column":13}},"line":221},"29":{"name":"(anonymous_29)","decl":{"start":{"line":222,"column":32},"end":{"line":222,"column":33}},"loc":{"start":{"line":222,"column":54},"end":{"line":224,"column":17}},"line":222},"30":{"name":"(anonymous_30)","decl":{"start":{"line":229,"column":4},"end":{"line":229,"column":5}},"loc":{"start":{"line":229,"column":35},"end":{"line":254,"column":5}},"line":229},"31":{"name":"(anonymous_31)","decl":{"start":{"line":241,"column":43},"end":{"line":241,"column":44}},"loc":{"start":{"line":241,"column":54},"end":{"line":252,"column":9}},"line":241},"32":{"name":"(anonymous_32)","decl":{"start":{"line":243,"column":41},"end":{"line":243,"column":42}},"loc":{"start":{"line":243,"column":53},"end":{"line":250,"column":13}},"line":243}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},{"start":{"line":52,"column":8},"end":{"line":54,"column":9}}],"line":52},"20":{"loc":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},{"start":{"line":61,"column":12},"end":{"line":63,"column":13}}],"line":61},"21":{"loc":{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":75,"column":9}},{"start":{"line":70,"column":8},"end":{"line":75,"column":9}}],"line":70},"22":{"loc":{"start":{"line":73,"column":13},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":13},"end":{"line":75,"column":9}},{"start":{"line":73,"column":13},"end":{"line":75,"column":9}}],"line":73},"23":{"loc":{"start":{"line":79,"column":8},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":100,"column":9}},{"start":{"line":79,"column":8},"end":{"line":100,"column":9}}],"line":79},"24":{"loc":{"start":{"line":82,"column":13},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":13},"end":{"line":100,"column":9}},{"start":{"line":82,"column":13},"end":{"line":100,"column":9}}],"line":82},"25":{"loc":{"start":{"line":82,"column":17},"end":{"line":82,"column":48}},"type":"binary-expr","locations":[{"start":{"line":82,"column":17},"end":{"line":82,"column":31}},{"start":{"line":82,"column":35},"end":{"line":82,"column":48}}],"line":82},"26":{"loc":{"start":{"line":85,"column":13},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":85,"column":13},"end":{"line":100,"column":9}},{"start":{"line":85,"column":13},"end":{"line":100,"column":9}}],"line":85},"27":{"loc":{"start":{"line":85,"column":17},"end":{"line":85,"column":64}},"type":"binary-expr","locations":[{"start":{"line":85,"column":17},"end":{"line":85,"column":30}},{"start":{"line":85,"column":34},"end":{"line":85,"column":47}},{"start":{"line":85,"column":51},"end":{"line":85,"column":64}}],"line":85},"28":{"loc":{"start":{"line":88,"column":13},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":88,"column":13},"end":{"line":100,"column":9}},{"start":{"line":88,"column":13},"end":{"line":100,"column":9}}],"line":88},"29":{"loc":{"start":{"line":91,"column":13},"end":{"line":100,"column":9}},"type":"if","locations":[{"start":{"line":91,"column":13},"end":{"line":100,"column":9}},{"start":{"line":91,"column":13},"end":{"line":100,"column":9}}],"line":91},"30":{"loc":{"start":{"line":97,"column":24},"end":{"line":97,"column":119}},"type":"cond-expr","locations":[{"start":{"line":97,"column":96},"end":{"line":97,"column":106}},{"start":{"line":97,"column":109},"end":{"line":97,"column":119}}],"line":97},"31":{"loc":{"start":{"line":103,"column":8},"end":{"line":106,"column":9}},"type":"if","locations":[{"start":{"line":103,"column":8},"end":{"line":106,"column":9}},{"start":{"line":103,"column":8},"end":{"line":106,"column":9}}],"line":103},"32":{"loc":{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},"type":"if","locations":[{"start":{"line":116,"column":12},"end":{"line":118,"column":13}},{"start":{"line":116,"column":12},"end":{"line":118,"column":13}}],"line":116},"33":{"loc":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},{"start":{"line":142,"column":12},"end":{"line":144,"column":13}}],"line":142},"34":{"loc":{"start":{"line":142,"column":33},"end":{"line":142,"column":128}},"type":"cond-expr","locations":[{"start":{"line":142,"column":105},"end":{"line":142,"column":115}},{"start":{"line":142,"column":118},"end":{"line":142,"column":128}}],"line":142},"35":{"loc":{"start":{"line":143,"column":35},"end":{"line":143,"column":130}},"type":"cond-expr","locations":[{"start":{"line":143,"column":107},"end":{"line":143,"column":117}},{"start":{"line":143,"column":120},"end":{"line":143,"column":130}}],"line":143},"36":{"loc":{"start":{"line":155,"column":12},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":177,"column":13}},{"start":{"line":155,"column":12},"end":{"line":177,"column":13}}],"line":155},"37":{"loc":{"start":{"line":156,"column":36},"end":{"line":156,"column":131}},"type":"cond-expr","locations":[{"start":{"line":156,"column":108},"end":{"line":156,"column":118}},{"start":{"line":156,"column":121},"end":{"line":156,"column":131}}],"line":156},"38":{"loc":{"start":{"line":158,"column":17},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":158,"column":17},"end":{"line":177,"column":13}},{"start":{"line":158,"column":17},"end":{"line":177,"column":13}}],"line":158},"39":{"loc":{"start":{"line":158,"column":21},"end":{"line":158,"column":67}},"type":"binary-expr","locations":[{"start":{"line":158,"column":21},"end":{"line":158,"column":43}},{"start":{"line":158,"column":47},"end":{"line":158,"column":67}}],"line":158},"40":{"loc":{"start":{"line":159,"column":16},"end":{"line":161,"column":17}},"type":"if","locations":[{"start":{"line":159,"column":16},"end":{"line":161,"column":17}},{"start":{"line":159,"column":16},"end":{"line":161,"column":17}}],"line":159},"41":{"loc":{"start":{"line":160,"column":40},"end":{"line":160,"column":135}},"type":"cond-expr","locations":[{"start":{"line":160,"column":112},"end":{"line":160,"column":122}},{"start":{"line":160,"column":125},"end":{"line":160,"column":135}}],"line":160},"42":{"loc":{"start":{"line":163,"column":17},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":163,"column":17},"end":{"line":177,"column":13}},{"start":{"line":163,"column":17},"end":{"line":177,"column":13}}],"line":163},"43":{"loc":{"start":{"line":164,"column":16},"end":{"line":166,"column":17}},"type":"if","locations":[{"start":{"line":164,"column":16},"end":{"line":166,"column":17}},{"start":{"line":164,"column":16},"end":{"line":166,"column":17}}],"line":164},"44":{"loc":{"start":{"line":165,"column":40},"end":{"line":165,"column":135}},"type":"cond-expr","locations":[{"start":{"line":165,"column":112},"end":{"line":165,"column":122}},{"start":{"line":165,"column":125},"end":{"line":165,"column":135}}],"line":165},"45":{"loc":{"start":{"line":168,"column":17},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":168,"column":17},"end":{"line":177,"column":13}},{"start":{"line":168,"column":17},"end":{"line":177,"column":13}}],"line":168},"46":{"loc":{"start":{"line":169,"column":16},"end":{"line":171,"column":17}},"type":"if","locations":[{"start":{"line":169,"column":16},"end":{"line":171,"column":17}},{"start":{"line":169,"column":16},"end":{"line":171,"column":17}}],"line":169},"47":{"loc":{"start":{"line":170,"column":40},"end":{"line":170,"column":135}},"type":"cond-expr","locations":[{"start":{"line":170,"column":112},"end":{"line":170,"column":122}},{"start":{"line":170,"column":125},"end":{"line":170,"column":135}}],"line":170},"48":{"loc":{"start":{"line":174,"column":16},"end":{"line":176,"column":17}},"type":"if","locations":[{"start":{"line":174,"column":16},"end":{"line":176,"column":17}},{"start":{"line":174,"column":16},"end":{"line":176,"column":17}}],"line":174},"49":{"loc":{"start":{"line":175,"column":40},"end":{"line":175,"column":135}},"type":"cond-expr","locations":[{"start":{"line":175,"column":112},"end":{"line":175,"column":122}},{"start":{"line":175,"column":125},"end":{"line":175,"column":135}}],"line":175},"50":{"loc":{"start":{"line":190,"column":12},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":198,"column":13}},{"start":{"line":190,"column":12},"end":{"line":198,"column":13}}],"line":190},"51":{"loc":{"start":{"line":190,"column":16},"end":{"line":190,"column":61}},"type":"binary-expr","locations":[{"start":{"line":190,"column":16},"end":{"line":190,"column":35}},{"start":{"line":190,"column":39},"end":{"line":190,"column":61}}],"line":190},"52":{"loc":{"start":{"line":191,"column":36},"end":{"line":191,"column":131}},"type":"cond-expr","locations":[{"start":{"line":191,"column":108},"end":{"line":191,"column":118}},{"start":{"line":191,"column":121},"end":{"line":191,"column":131}}],"line":191},"53":{"loc":{"start":{"line":193,"column":17},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":193,"column":17},"end":{"line":198,"column":13}},{"start":{"line":193,"column":17},"end":{"line":198,"column":13}}],"line":193},"54":{"loc":{"start":{"line":193,"column":21},"end":{"line":193,"column":66}},"type":"binary-expr","locations":[{"start":{"line":193,"column":21},"end":{"line":193,"column":40}},{"start":{"line":193,"column":44},"end":{"line":193,"column":66}}],"line":193},"55":{"loc":{"start":{"line":194,"column":36},"end":{"line":194,"column":131}},"type":"cond-expr","locations":[{"start":{"line":194,"column":108},"end":{"line":194,"column":118}},{"start":{"line":194,"column":121},"end":{"line":194,"column":131}}],"line":194},"56":{"loc":{"start":{"line":196,"column":17},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":196,"column":17},"end":{"line":198,"column":13}},{"start":{"line":196,"column":17},"end":{"line":198,"column":13}}],"line":196},"57":{"loc":{"start":{"line":196,"column":21},"end":{"line":196,"column":68}},"type":"binary-expr","locations":[{"start":{"line":196,"column":21},"end":{"line":196,"column":40}},{"start":{"line":196,"column":44},"end":{"line":196,"column":68}}],"line":196},"58":{"loc":{"start":{"line":197,"column":36},"end":{"line":197,"column":131}},"type":"cond-expr","locations":[{"start":{"line":197,"column":108},"end":{"line":197,"column":118}},{"start":{"line":197,"column":121},"end":{"line":197,"column":131}}],"line":197},"59":{"loc":{"start":{"line":209,"column":8},"end":{"line":226,"column":9}},"type":"if","locations":[{"start":{"line":209,"column":8},"end":{"line":226,"column":9}},{"start":{"line":209,"column":8},"end":{"line":226,"column":9}}],"line":209},"60":{"loc":{"start":{"line":214,"column":20},"end":{"line":216,"column":21}},"type":"if","locations":[{"start":{"line":214,"column":20},"end":{"line":216,"column":21}},{"start":{"line":214,"column":20},"end":{"line":216,"column":21}}],"line":214},"61":{"loc":{"start":{"line":230,"column":8},"end":{"line":232,"column":9}},"type":"if","locations":[{"start":{"line":230,"column":8},"end":{"line":232,"column":9}},{"start":{"line":230,"column":8},"end":{"line":232,"column":9}}],"line":230},"62":{"loc":{"start":{"line":233,"column":8},"end":{"line":240,"column":9}},"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":240,"column":9}},{"start":{"line":233,"column":8},"end":{"line":240,"column":9}}],"line":233},"63":{"loc":{"start":{"line":234,"column":12},"end":{"line":239,"column":13}},"type":"if","locations":[{"start":{"line":234,"column":12},"end":{"line":239,"column":13}},{"start":{"line":234,"column":12},"end":{"line":239,"column":13}}],"line":234},"64":{"loc":{"start":{"line":245,"column":16},"end":{"line":248,"column":17}},"type":"if","locations":[{"start":{"line":245,"column":16},"end":{"line":248,"column":17}},{"start":{"line":245,"column":16},"end":{"line":248,"column":17}}],"line":245}},"s":{"0":1,"1":148,"2":148,"3":148,"4":148,"5":148,"6":195,"7":148,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":0,"17":1,"18":1,"19":1,"20":148,"21":148,"22":1,"23":1,"24":1,"25":3,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":99,"35":99,"36":99,"37":99,"38":99,"39":99,"40":99,"41":99,"42":3,"43":96,"44":96,"45":96,"46":96,"47":96,"48":1137396,"49":1137396,"50":1137396,"51":96,"52":96,"53":96,"54":96,"55":69,"56":27,"57":27,"58":96,"59":196,"60":0,"61":196,"62":40,"63":156,"64":98,"65":58,"66":36,"67":22,"68":7,"69":15,"70":15,"71":904932,"72":15,"73":96,"74":22,"75":22,"76":74,"77":22,"78":22,"79":922067,"80":1038355,"81":1038355,"82":922067,"83":808,"84":922067,"85":22,"86":22,"87":22,"88":808,"89":808,"90":808,"91":808,"92":1115,"93":1115,"94":1115,"95":808,"96":22,"97":7,"98":7,"99":7,"100":131044,"101":1086,"102":7,"103":36,"104":36,"105":36,"106":36,"107":36,"108":36,"109":1555056,"110":364,"111":1554692,"112":259176,"113":23462,"114":1295516,"115":193836,"116":4441,"117":1101680,"118":258448,"119":11727,"120":843232,"121":3613,"122":36,"123":98,"124":98,"125":98,"126":98,"127":98,"128":98,"129":98,"130":98,"131":4597280,"132":350456,"133":4246824,"134":958857,"135":3287967,"136":34924,"137":98,"138":40,"139":40,"140":40,"141":93,"142":40,"143":40,"144":28,"145":165062,"146":28,"147":28,"148":41,"149":41,"150":153979,"151":134581,"152":12,"153":24,"154":11648,"155":40,"156":96,"157":3,"158":93,"159":58,"160":45,"161":13,"162":93,"163":22356,"164":22356,"165":58040,"166":58040,"167":57138,"168":57138,"169":58040,"170":22356,"171":93,"172":1},"f":{"0":148,"1":195,"2":0,"3":1,"4":0,"5":1,"6":3,"7":99,"8":99,"9":1137396,"10":96,"11":196,"12":904932,"13":96,"14":22,"15":922067,"16":1038355,"17":22,"18":1115,"19":7,"20":131044,"21":36,"22":1555056,"23":98,"24":4597280,"25":40,"26":93,"27":165062,"28":24,"29":11648,"30":96,"31":22356,"32":58040},"b":{"0":[1,1,1],"1":[1,0],"2":[148,0],"3":[148,0],"4":[148,148],"5":[0,148],"6":[148,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[0,1],"12":[1,1],"13":[1,0],"14":[148,0],"15":[148,148],"16":[1,1,1],"17":[3,0],"18":[3,3],"19":[3,96],"20":[1137396,0],"21":[69,27],"22":[27,0],"23":[0,196],"24":[40,156],"25":[196,168],"26":[98,58],"27":[156,132,76],"28":[36,22],"29":[7,15],"30":[904568,364],"31":[22,74],"32":[808,921259],"33":[1086,129958],"34":[129224,1820],"35":[59,1027],"36":[364,1554692],"37":[0,364],"38":[259176,1295516],"39":[1554692,453012],"40":[23462,235714],"41":[22823,639],"42":[193836,1101680],"43":[4441,189395],"44":[4441,0],"45":[258448,843232],"46":[11727,246721],"47":[11727,0],"48":[3613,839619],"49":[3591,22],"50":[350456,4246824],"51":[4597280,2269064],"52":[348578,1878],"53":[958857,3287967],"54":[4246824,1293696],"55":[957910,947],"56":[34924,3253043],"57":[3287967,1034520],"58":[34908,16],"59":[28,12],"60":[134581,19398],"61":[3,93],"62":[58,35],"63":[45,13],"64":[57138,902]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/models/Query.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/models/Query.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iEAAkH;AAelH,6CAA+B;AAC/B,sEAA8C;AAC9C,0DAA6C;AAC7C,oDAK6B;AAC7B,oDAAoC;AAGpC,MAAa,KAAK;IACV,KAAK,CAAS;IACd,OAAO,CAAU;IACjB,eAAe,CAAmB;IAClC,WAAW,CAAS;IAEnB,SAAS,GAAG,QAAQ,CAAC;IACrB,IAAI,CAAsB;IAElC,YAAY,SAAoB;QAC/B,IAAI,EAAE,GAAmB,IAAI,wBAAc,EAAE,CAAC;QAC9C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC,eAAe,CAAC;QACjD,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IACvB,CAAC;IAEM,OAAO;QACb,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,EAAE;YAC1E,MAAM,IAAI,6BAAY,CAAC,qBAAqB,IAAI,CAAC,WAAW,8BAA8B,CAAC,CAAC;SAC5F;QACD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAGhD,MAAM,eAAe,GAAuB,EAAE,CAAC;QAE/C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC;QAC7C,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC/B,MAAM,KAAK,GAAG,UAAU,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;YACxC,IAAI,KAAK,EAAE;gBACV,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC5B;QACF,CAAC,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IAC3C,CAAC;IAEO,QAAQ;QACf,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,CAAC;QAClF,IAAI,MAAM,CAAC,IAAI,KAAK,mCAAkB,CAAC,QAAQ,EAAE;YAChD,IAAI,CAAC,IAAI,GAAG,IAAI,kBAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SACpC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,mCAAkB,CAAC,KAAK,EAAE;YACpD,IAAI,CAAC,IAAI,GAAG,IAAI,eAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SACjC;QAED,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEO,WAAW,CAAC,KAAa;QAChC,IAAI,CAAC,KAAK,EAAE;YACX,MAAM,IAAI,6BAAY,CAAC,qDAAqD,CAAC,CAAC;SAC9E;aAAM,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YAC3C,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAwB,CAAC,CAAC;SAC5D;aAAM,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;YAC3D,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAoB,CAAC,CAAC;SACpD;aAAM,IAAI,IAAI,IAAI,KAAK,EAAE;YACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAoB,CAAC,CAAC;SACpD;aAAM,IAAI,KAAK,IAAI,KAAK,EAAE;YAC1B,OAAO,IAAI,CAAC,cAAc,CAAC,KAAiB,CAAC,CAAC;SAC9C;aAAM;YACN,MAAM,GAAG,GAAG,IAAI,GAAG,EAAU,CAAC;YAC9B,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACtC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzF,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,CAAC;SACX;IACF,CAAC;IAEO,qBAAqB,CAAC,KAAY;QACzC,IAAI,IAAI,CAAC,eAAe,EAAE;YACzB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAE7C,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;SACnC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,cAAc,CAAC,eAAsB;QAC5C,MAAM,SAAS,GAAG,IAAI,GAAG,EAAiB,CAAC;QAE3C,eAAe,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;gBACrD,IAAA,mCAAsB,EAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;gBAClD,OAAO,GAAG,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEd,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAe,CAAC,EAAE;gBACpC,SAAS,CAAC,GAAG,CAAC,KAAe,EAAE,EAAE,CAAC,CAAC;aACnC;YAED,SAAS,CAAC,GAAG,CAAC,KAAe,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IAClB,CAAC;IAEO,WAAW,CAAC,KAAyB;QAC5C,MAAM,OAAO,GAAU,EAAE,CAAC;QAE1B,KAAK,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;YACvD,MAAM,MAAM,GAAQ,EAAE,CAAC;YACvB,IAAA,uBAAU,EAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAGhF,MAAM,aAAa,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/C,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC3B,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACrB;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAEO,cAAc,CAAC,KAAe;QAErC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAGhD,MAAM,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACtC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACrG,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACnG;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,cAAc,CAAC;IACvB,CAAC;IAEM,iBAAiB,CAAC,KAAkB;QAC1C,MAAM,eAAe,GAAG,IAAI,GAAG,EAAU,CAAC;QAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAA,mCAAsB,EAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QAClD,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAW,CAAC;QAC3C,MAAM,MAAM,GAAG,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QAE7B,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;YAC3C,IAAI,MAAM,KAAK,GAAG,EAAE;gBACnB,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACpG;iBAAM,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAE1D,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;oBACnE,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBACpG;aACD;iBAAM,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAElC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;oBAChD,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBACpG;aACD;iBAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAEhC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;oBACrE,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBACpG;aACD;iBAAM;gBAEN,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;oBAC7B,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBACpG;aACD;QACF,CAAC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IACxB,CAAC;IAEO,iBAAiB,CAAC,KAAkB;QAC3C,MAAM,eAAe,GAAG,IAAI,GAAG,EAAU,CAAC;QAC1C,MAAM,UAAU,GAAsB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAgB,CAAC;QAC3E,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAW,CAAC;QAElD,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAA,mCAAsB,EAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QAElD,MAAM,MAAM,GAAW,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/C,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;YAC3C,IAAI,UAAU,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE;gBAClD,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACpG;iBAAM,IAAI,UAAU,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,EAAE;gBACzD,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACpG;iBAAM,IAAI,UAAU,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;gBAC3D,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,mCAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACpG;QACF,CAAC,CAAC,CAAC;QACH,OAAO,eAAe,CAAC;IACxB,CAAC;IAEO,qBAAqB,CAAC,KAAsB;QACnD,MAAM,WAAW,GAAuB,EAAE,CAAC;QAC3C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAU,CAAC;QAEhD,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAI,GAAG,EAAU,CAAC;QACjC,IAAI,QAAQ,KAAK,KAAK,EAAE;YAEvB,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAG5E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC5C,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gBAClC,KAAK,MAAM,gBAAgB,IAAI,MAAM,EAAE;oBACtC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;wBACtC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;qBAChC;iBACD;aACD;SACD;aAAM;YAEN,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC/B,OAAO,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,EAAE;oBACpC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;SACH;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,aAAa,CAAC,eAAsB;QAC3C,IAAI,eAAe,CAAC,MAAM,GAAG,IAAI,EAAE;YAClC,MAAM,IAAI,oCAAmB,CAAC,2BAA2B,CAAC,CAAC;SAC3D;QAGD,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YACvB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,QAAQ,EAAE;gBAC3C,IAAA,iCAAoB,EAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;aAChF;iBAAM;gBACN,IAAA,qCAAwB,EAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;aACpF;SACD;QAGD,MAAM,MAAM,GAAoB,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAE7D,MAAM,OAAO,GAA2B,EAAE,CAAC;YAC3C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACvC,IAAI,GAAG,GAAW,MAAM,CAAC;gBACzB,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACzB,IAAA,mCAAsB,EAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;oBAClD,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC3B;gBACD,OAAO,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,OAAO,OAAwB,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACf,CAAC;CACD;AA/PD,sBA+PC","sourcesContent":["import {InsightDatasetKind, InsightError, InsightResult, ResultTooLargeError} from \"../controller/IInsightFacade\";\nimport {\n\tFilter,\n\tIQuery,\n\tJSONQuery,\n\tLogic,\n\tLogicComparison,\n\tMComparator,\n\tMComparison,\n\tNegation,\n\tOptions,\n\tSComparison,\n\tSField,\n\tTransformations,\n} from \"./IQuery\";\nimport * as fs from \"fs-extra\";\nimport QueryValidator from \"./QueryValidator\";\nimport Sections, {Section} from \"./Sections\";\nimport {\n\tapplyRules,\n\torderEntriesBySortObject,\n\torderEntriesByString,\n\tvalidateKeyMatchesKind,\n} from \"../utils/QueryUtils\";\nimport Rooms, {Room} from \"./Rooms\";\nimport {Dataset} from \"./Dataset\";\n\nexport class Query implements IQuery {\n\tpublic WHERE: Filter;\n\tpublic OPTIONS: Options;\n\tpublic TRANSFORMATIONS?: Transformations;\n\tpublic datasetName: string;\n\n\tprivate directory = \"./data\";\n\tprivate data: Dataset | undefined;\n\n\tconstructor(queryJSON: JSONQuery) {\n\t\tlet QV: QueryValidator = new QueryValidator();\n\t\tthis.datasetName = QV.validateQuery(queryJSON);\n\t\tthis.WHERE = queryJSON.WHERE;\n\t\tthis.OPTIONS = queryJSON.OPTIONS;\n\t\tthis.TRANSFORMATIONS = queryJSON.TRANSFORMATIONS;\n\t\tthis.data = undefined;\n\t}\n\n\tpublic execute(): InsightResult[] {\n\t\tif (!fs.pathExistsSync(this.directory + \"/\" + this.datasetName + \".json\")) {\n\t\t\tthrow new InsightError(`Cannot query from ${this.datasetName} due to not being added yet.`);\n\t\t}\n\t\tthis.loadData();\n\t\tconst afterWhere = this.handleWhere(this.WHERE);\n\n\t\t// Parse WHERE data into a map\n\t\tconst selectedEntries: Section[] | Room[] = [];\n\n\t\tconst allEntries = this.data?.getDataAsMap();\n\t\tafterWhere.forEach((uniqueID) => {\n\t\t\tconst entry = allEntries?.get(uniqueID);\n\t\t\tif (entry) {\n\t\t\t\tselectedEntries.push(entry);\n\t\t\t}\n\t\t});\n\n\t\tconst afterTransform = this.handleTransformations(selectedEntries);\n\t\treturn this.handleOptions(afterTransform);\n\t}\n\n\tprivate loadData() {\n\t\tconst object = fs.readJSONSync(this.directory + \"/\" + this.datasetName + \".json\");\n\t\tif (object.kind === InsightDatasetKind.Sections) {\n\t\t\tthis.data = new Sections(object.id);\n\t\t} else if (object.kind === InsightDatasetKind.Rooms) {\n\t\t\tthis.data = new Rooms(object.id);\n\t\t}\n\n\t\tthis.data?.addDataFromJSON(object.sections);\n\t}\n\n\tprivate handleWhere(input: Filter): Set<string> {\n\t\tif (!input) {\n\t\t\tthrow new InsightError(\"this.WHERE should not be NULL after query validated\");\n\t\t} else if (\"AND\" in input || \"OR\" in input) {\n\t\t\treturn this.handleLogicComparison(input as LogicComparison);\n\t\t} else if (\"LT\" in input || \"GT\" in input || \"EQ\" in input) {\n\t\t\treturn this.handleMComparison(input as MComparison);\n\t\t} else if (\"IS\" in input) {\n\t\t\treturn this.handleSComparison(input as SComparison);\n\t\t} else if (\"NOT\" in input) {\n\t\t\treturn this.handleNegation(input as Negation);\n\t\t} else {\n\t\t\tconst all = new Set<string>();\n\t\t\tthis.data?.getData().forEach((entry) => {\n\t\t\t\tall.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t});\n\t\t\treturn all;\n\t\t}\n\t}\n\n\tprivate handleTransformations(input: any[]): any[] {\n\t\tif (this.TRANSFORMATIONS) {\n\t\t\tconst groupings = this.handleGrouping(input);\n\n\t\t\treturn this.handleApply(groupings);\n\t\t}\n\t\treturn input;\n\t}\n\n\tprivate handleGrouping(selectedEntries: any[]): Map<string, any[]> {\n\t\tconst groupings = new Map<string, any[]>();\n\n\t\tselectedEntries.forEach((entry) => {\n\t\t\tconst tuple = this.TRANSFORMATIONS?.GROUP.map((key) => {\n\t\t\t\tvalidateKeyMatchesKind(key, this.data?.getKind());\n\t\t\t\treturn `${key}__${entry[key.split(\"_\")[1]]}`;\n\t\t\t}).join(\"||\");\n\n\t\t\tif (!groupings.has(tuple as string)) {\n\t\t\t\tgroupings.set(tuple as string, []);\n\t\t\t}\n\n\t\t\tgroupings.get(tuple as string)?.push(entry);\n\t\t});\n\n\t\treturn groupings;\n\t}\n\n\tprivate handleApply(input: Map<string, any[]>): any[] {\n\t\tconst results: any[] = [];\n\n\t\tfor (const [encodedTuple, sections] of input.entries()) {\n\t\t\tconst result: any = {};\n\t\t\tapplyRules(sections, result, this.TRANSFORMATIONS?.APPLY, this.data?.getKind());\n\n\t\t\t// Add order keys back to object\n\t\t\tconst decodedTuples = encodedTuple.split(\"||\");\n\t\t\tdecodedTuples.map((tuple) => {\n\t\t\t\tlet [key] = tuple.split(\"__\");\n\t\t\t\tkey = key.split(\"_\")[1];\n\t\t\t\tresult[key] = sections[0][key];\n\t\t\t});\n\t\t\tresults.push(result);\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tprivate handleNegation(input: Negation): Set<string> {\n\t\t// Handle the filter inside the NOT and get its result.\n\t\tconst innerResult = this.handleWhere(input.NOT);\n\n\t\t// Subtract innerResult from all to get the result of the NOT filter.\n\t\tconst negationResult = new Set<string>();\n\t\tthis.data?.getData().forEach((entry) => {\n\t\t\tif (!innerResult.has(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href)) {\n\t\t\t\tnegationResult.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t}\n\t\t});\n\n\t\treturn negationResult;\n\t}\n\n\tpublic handleSComparison(input: SComparison): Set<string> {\n\t\tconst sectionMappings = new Set<string>();\n\t\tconst key = Object.keys(input.IS)[0]; // Dataset name + SField\n\t\tvalidateKeyMatchesKind(key, this.data?.getKind());\n\t\tconst sField = key.split(\"_\")[1] as SField; // SField\n\t\tconst sValue = input.IS[key];\n\n\t\tthis.data?.getData().forEach((entry: any) => {\n\t\t\tif (sValue === \"*\") {\n\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t} else if (sValue.startsWith(\"*\") && sValue.endsWith(\"*\")) {\n\t\t\t\t// Contains inputstring\n\t\t\t\tif (entry[sField].includes(sValue.substring(1, sValue.length - 1))) {\n\t\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t\t}\n\t\t\t} else if (sValue.startsWith(\"*\")) {\n\t\t\t\t// Ends with inputstring\n\t\t\t\tif (entry[sField].endsWith(sValue.substring(1))) {\n\t\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t\t}\n\t\t\t} else if (sValue.endsWith(\"*\")) {\n\t\t\t\t// Starts with inputstring\n\t\t\t\tif (entry[sField].startsWith(sValue.substring(0, sValue.length - 1))) {\n\t\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Matches inputstring exactly\n\t\t\t\tif (entry[sField] === sValue) {\n\t\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn sectionMappings;\n\t}\n\n\tprivate handleMComparison(input: MComparison): Set<string> {\n\t\tconst sectionMappings = new Set<string>();\n\t\tconst compareKey: keyof MComparison = Object.keys(input)[0] as MComparator; // GT, LT, or EQ\n\t\tconst compareObject = input[compareKey] as object;\n\n\t\tconst key = Object.keys(compareObject)[0];\n\t\tvalidateKeyMatchesKind(key, this.data?.getKind());\n\n\t\tconst mField: string = key.split(\"_\")[1]; // MField\n\t\tconst mValue = Object.values(compareObject)[0];\n\n\t\tthis.data?.getData().forEach((entry: any) => {\n\t\t\tif (compareKey === \"GT\" && entry[mField] > mValue) {\n\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t} else if (compareKey === \"LT\" && entry[mField] < mValue) {\n\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t} else if (compareKey === \"EQ\" && entry[mField] === mValue) {\n\t\t\t\tsectionMappings.add(this.data?.getKind() === InsightDatasetKind.Sections ? entry.uuid : entry.href);\n\t\t\t}\n\t\t});\n\t\treturn sectionMappings;\n\t}\n\n\tprivate handleLogicComparison(input: LogicComparison): Set<string> {\n\t\tconst allMappings: Array<Set<string>> = [];\n\t\tconst logicKey = Object.keys(input)[0] as Logic;\n\n\t\tinput[logicKey]?.forEach((comparison) => {\n\t\t\tallMappings.push(this.handleWhere(comparison));\n\t\t});\n\n\t\tconst result = new Set<string>();\n\t\tif (logicKey === \"AND\") {\n\t\t\t// Initialize result with elements from the first set\n\t\t\tallMappings[0]?.forEach((uniqueIdentifier) => result.add(uniqueIdentifier));\n\n\t\t\t// Iterate over the remaining sets and filter out elements not common to all sets\n\t\t\tfor (let i = 1; i < allMappings.length; i++) {\n\t\t\t\tconst currentSet = allMappings[i];\n\t\t\t\tfor (const uniqueIdentifier of result) {\n\t\t\t\t\tif (!currentSet.has(uniqueIdentifier)) {\n\t\t\t\t\t\tresult.delete(uniqueIdentifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// For OR logic, add all unique elements from all sets\n\t\t\tallMappings.forEach((mapping) => {\n\t\t\t\tmapping.forEach((uniqueIdentifier) => {\n\t\t\t\t\tresult.add(uniqueIdentifier);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate handleOptions(selectedEntries: any[]): InsightResult[] {\n\t\tif (selectedEntries.length > 5000) {\n\t\t\tthrow new ResultTooLargeError(\"Greater than 5000 results\");\n\t\t}\n\n\t\t// Handle order\n\t\tif (this.OPTIONS.ORDER) {\n\t\t\tif (typeof this.OPTIONS.ORDER === \"string\") {\n\t\t\t\torderEntriesByString(selectedEntries, this.OPTIONS.ORDER, this.data?.getKind());\n\t\t\t} else {\n\t\t\t\torderEntriesBySortObject(selectedEntries, this.OPTIONS.ORDER, this.data?.getKind());\n\t\t\t}\n\t\t}\n\n\t\t// Return insightResults\n\t\tconst result: InsightResult[] = selectedEntries.map((entry) => {\n\t\t\t// Only keep the fields listed in this.OPTIONS.COLUMNS\n\t\t\tconst insight: Partial<InsightResult> = {};\n\t\t\tthis.OPTIONS.COLUMNS.forEach((column) => {\n\t\t\t\tlet key: string = column;\n\t\t\t\tif (column.includes(\"_\")) {\n\t\t\t\t\tvalidateKeyMatchesKind(key, this.data?.getKind());\n\t\t\t\t\tkey = column.split(\"_\")[1]; // if the column is like 'sections_avg'\n\t\t\t\t}\n\t\t\t\tinsight[column] = entry[key];\n\t\t\t});\n\t\t\treturn insight as InsightResult; // forcibly cast the Partial<InsightResult> to InsightResult\n\t\t});\n\t\treturn result;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1ffe64969b28e541584c4edc4438a80becaa7ec1","contentHash":"64c14dd9b658ce71941c1502c12a6f1894904704dc07f0f9b0262d846ed5f097"},"/Users/han/code/cpsc310/c1/project_team123/src/utils/QueryUtils.ts":{"path":"/Users/han/code/cpsc310/c1/project_team123/src/utils/QueryUtils.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":127}},"4":{"start":{"line":7,"column":21},"end":{"line":7,"column":59}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":64}},"6":{"start":{"line":10,"column":26},"end":{"line":10,"column":111}},"7":{"start":{"line":11,"column":23},"end":{"line":23,"column":5}},"8":{"start":{"line":24,"column":4},"end":{"line":27,"column":5}},"9":{"start":{"line":25,"column":29},"end":{"line":25,"column":134}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":80}},"11":{"start":{"line":28,"column":18},"end":{"line":28,"column":35}},"12":{"start":{"line":29,"column":4},"end":{"line":32,"column":5}},"13":{"start":{"line":31,"column":8},"end":{"line":31,"column":71}},"14":{"start":{"line":34,"column":0},"end":{"line":34,"column":56}},"15":{"start":{"line":36,"column":19},"end":{"line":36,"column":22}},"16":{"start":{"line":37,"column":4},"end":{"line":40,"column":5}},"17":{"start":{"line":38,"column":8},"end":{"line":38,"column":47}},"18":{"start":{"line":39,"column":8},"end":{"line":39,"column":42}},"19":{"start":{"line":41,"column":4},"end":{"line":41,"column":97}},"20":{"start":{"line":41,"column":28},"end":{"line":41,"column":94}},"21":{"start":{"line":43,"column":0},"end":{"line":43,"column":52}},"22":{"start":{"line":45,"column":4},"end":{"line":63,"column":7}},"23":{"start":{"line":46,"column":8},"end":{"line":61,"column":9}},"24":{"start":{"line":47,"column":27},"end":{"line":47,"column":30}},"25":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"26":{"start":{"line":49,"column":16},"end":{"line":49,"column":55}},"27":{"start":{"line":50,"column":16},"end":{"line":50,"column":45}},"28":{"start":{"line":52,"column":12},"end":{"line":60,"column":13}},"29":{"start":{"line":53,"column":16},"end":{"line":59,"column":29}},"30":{"start":{"line":62,"column":8},"end":{"line":62,"column":17}},"31":{"start":{"line":65,"column":0},"end":{"line":65,"column":60}},"32":{"start":{"line":67,"column":4},"end":{"line":99,"column":5}},"33":{"start":{"line":68,"column":8},"end":{"line":98,"column":11}},"34":{"start":{"line":69,"column":29},"end":{"line":69,"column":54}},"35":{"start":{"line":70,"column":31},"end":{"line":70,"column":66}},"36":{"start":{"line":71,"column":12},"end":{"line":71,"column":74}},"37":{"start":{"line":72,"column":26},"end":{"line":72,"column":72}},"38":{"start":{"line":73,"column":12},"end":{"line":97,"column":13}},"39":{"start":{"line":75,"column":20},"end":{"line":75,"column":90}},"40":{"start":{"line":75,"column":75},"end":{"line":75,"column":87}},"41":{"start":{"line":76,"column":20},"end":{"line":76,"column":26}},"42":{"start":{"line":79,"column":20},"end":{"line":79,"column":90}},"43":{"start":{"line":79,"column":75},"end":{"line":79,"column":87}},"44":{"start":{"line":80,"column":20},"end":{"line":80,"column":26}},"45":{"start":{"line":83,"column":32},"end":{"line":83,"column":59}},"46":{"start":{"line":84,"column":20},"end":{"line":84,"column":109}},"47":{"start":{"line":84,"column":49},"end":{"line":84,"column":106}},"48":{"start":{"line":85,"column":20},"end":{"line":85,"column":95}},"49":{"start":{"line":86,"column":20},"end":{"line":86,"column":26}},"50":{"start":{"line":89,"column":32},"end":{"line":89,"column":152}},"51":{"start":{"line":89,"column":64},"end":{"line":89,"column":148}},"52":{"start":{"line":90,"column":20},"end":{"line":90,"column":62}},"53":{"start":{"line":91,"column":20},"end":{"line":91,"column":26}},"54":{"start":{"line":94,"column":20},"end":{"line":94,"column":91}},"55":{"start":{"line":94,"column":71},"end":{"line":94,"column":83}},"56":{"start":{"line":95,"column":20},"end":{"line":95,"column":26}},"57":{"start":{"line":101,"column":0},"end":{"line":101,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"validateKeyMatchesKind","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":31}},"loc":{"start":{"line":9,"column":43},"end":{"line":33,"column":1}},"line":9},"2":{"name":"orderEntriesByString","decl":{"start":{"line":35,"column":9},"end":{"line":35,"column":29}},"loc":{"start":{"line":35,"column":50},"end":{"line":42,"column":1}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":41,"column":17},"end":{"line":41,"column":18}},"loc":{"start":{"line":41,"column":28},"end":{"line":41,"column":94}},"line":41},"4":{"name":"orderEntriesBySortObject","decl":{"start":{"line":44,"column":9},"end":{"line":44,"column":33}},"loc":{"start":{"line":44,"column":62},"end":{"line":64,"column":1}},"line":44},"5":{"name":"(anonymous_5)","decl":{"start":{"line":45,"column":17},"end":{"line":45,"column":18}},"loc":{"start":{"line":45,"column":27},"end":{"line":63,"column":5}},"line":45},"6":{"name":"applyRules","decl":{"start":{"line":66,"column":9},"end":{"line":66,"column":19}},"loc":{"start":{"line":66,"column":51},"end":{"line":100,"column":1}},"line":66},"7":{"name":"(anonymous_7)","decl":{"start":{"line":68,"column":22},"end":{"line":68,"column":23}},"loc":{"start":{"line":68,"column":37},"end":{"line":98,"column":9}},"line":68},"8":{"name":"(anonymous_8)","decl":{"start":{"line":75,"column":64},"end":{"line":75,"column":65}},"loc":{"start":{"line":75,"column":75},"end":{"line":75,"column":87}},"line":75},"9":{"name":"(anonymous_9)","decl":{"start":{"line":79,"column":64},"end":{"line":79,"column":65}},"loc":{"start":{"line":79,"column":75},"end":{"line":79,"column":87}},"line":79},"10":{"name":"(anonymous_10)","decl":{"start":{"line":84,"column":37},"end":{"line":84,"column":38}},"loc":{"start":{"line":84,"column":49},"end":{"line":84,"column":106}},"line":84},"11":{"name":"(anonymous_11)","decl":{"start":{"line":89,"column":48},"end":{"line":89,"column":49}},"loc":{"start":{"line":89,"column":64},"end":{"line":89,"column":148}},"line":89},"12":{"name":"(anonymous_12)","decl":{"start":{"line":94,"column":60},"end":{"line":94,"column":61}},"loc":{"start":{"line":94,"column":71},"end":{"line":94,"column":83}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":24,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":27,"column":5}},{"start":{"line":24,"column":4},"end":{"line":27,"column":5}}],"line":24},"4":{"loc":{"start":{"line":24,"column":8},"end":{"line":24,"column":47}},"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},{"start":{"line":24,"column":29},"end":{"line":24,"column":47}}],"line":24},"5":{"loc":{"start":{"line":25,"column":29},"end":{"line":25,"column":134}},"type":"cond-expr","locations":[{"start":{"line":25,"column":49},"end":{"line":25,"column":105}},{"start":{"line":25,"column":108},"end":{"line":25,"column":134}}],"line":25},"6":{"loc":{"start":{"line":29,"column":4},"end":{"line":32,"column":5}},"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":32,"column":5}},{"start":{"line":29,"column":4},"end":{"line":32,"column":5}}],"line":29},"7":{"loc":{"start":{"line":29,"column":8},"end":{"line":30,"column":91}},"type":"binary-expr","locations":[{"start":{"line":29,"column":9},"end":{"line":29,"column":62}},{"start":{"line":29,"column":66},"end":{"line":29,"column":96}},{"start":{"line":30,"column":9},"end":{"line":30,"column":59}},{"start":{"line":30,"column":63},"end":{"line":30,"column":90}}],"line":29},"8":{"loc":{"start":{"line":37,"column":4},"end":{"line":40,"column":5}},"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":40,"column":5}},{"start":{"line":37,"column":4},"end":{"line":40,"column":5}}],"line":37},"9":{"loc":{"start":{"line":41,"column":28},"end":{"line":41,"column":94}},"type":"cond-expr","locations":[{"start":{"line":41,"column":56},"end":{"line":41,"column":58}},{"start":{"line":41,"column":61},"end":{"line":41,"column":94}}],"line":41},"10":{"loc":{"start":{"line":41,"column":61},"end":{"line":41,"column":94}},"type":"cond-expr","locations":[{"start":{"line":41,"column":89},"end":{"line":41,"column":90}},{"start":{"line":41,"column":93},"end":{"line":41,"column":94}}],"line":41},"11":{"loc":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},{"start":{"line":48,"column":12},"end":{"line":51,"column":13}}],"line":48},"12":{"loc":{"start":{"line":52,"column":12},"end":{"line":60,"column":13}},"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":60,"column":13}},{"start":{"line":52,"column":12},"end":{"line":60,"column":13}}],"line":52},"13":{"loc":{"start":{"line":53,"column":23},"end":{"line":59,"column":28}},"type":"cond-expr","locations":[{"start":{"line":54,"column":22},"end":{"line":56,"column":27}},{"start":{"line":57,"column":22},"end":{"line":59,"column":28}}],"line":53},"14":{"loc":{"start":{"line":54,"column":22},"end":{"line":56,"column":27}},"type":"cond-expr","locations":[{"start":{"line":55,"column":26},"end":{"line":55,"column":28}},{"start":{"line":56,"column":26},"end":{"line":56,"column":27}}],"line":54},"15":{"loc":{"start":{"line":57,"column":22},"end":{"line":59,"column":28}},"type":"cond-expr","locations":[{"start":{"line":58,"column":26},"end":{"line":58,"column":27}},{"start":{"line":59,"column":26},"end":{"line":59,"column":28}}],"line":57},"16":{"loc":{"start":{"line":67,"column":4},"end":{"line":99,"column":5}},"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":99,"column":5}},{"start":{"line":67,"column":4},"end":{"line":99,"column":5}}],"line":67},"17":{"loc":{"start":{"line":73,"column":12},"end":{"line":97,"column":13}},"type":"switch","locations":[{"start":{"line":74,"column":16},"end":{"line":77,"column":17}},{"start":{"line":78,"column":16},"end":{"line":81,"column":17}},{"start":{"line":82,"column":16},"end":{"line":87,"column":17}},{"start":{"line":88,"column":16},"end":{"line":92,"column":17}},{"start":{"line":93,"column":16},"end":{"line":96,"column":17}}],"line":73}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1097809,"7":1097809,"8":1097809,"9":2,"10":2,"11":1097807,"12":1097807,"13":4,"14":1,"15":47,"16":47,"17":44,"18":43,"19":46,"20":174724,"21":1,"22":17,"23":1964,"24":2027,"25":2027,"26":1124,"27":1123,"28":2026,"29":1691,"30":272,"31":1,"32":815,"33":814,"34":1008,"35":1008,"36":1008,"37":1008,"38":1008,"39":486,"40":534151,"41":486,"42":12,"43":64616,"44":12,"45":365,"46":365,"47":516900,"48":365,"49":365,"50":12,"51":64616,"52":12,"53":12,"54":133,"55":64998,"56":133,"57":1},"f":{"0":1,"1":1097809,"2":47,"3":174724,"4":17,"5":1964,"6":815,"7":1008,"8":534151,"9":64616,"10":516900,"11":64616,"12":64998},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[2,1097807],"4":[1097809,1097808],"5":[1,1],"6":[4,1097803],"7":[1097807,1086281,1097804,11526],"8":[44,3],"9":[90920,83804],"10":[61586,22218],"11":[1124,903],"12":[1691,335],"13":[691,1000],"14":[390,301],"15":[259,741],"16":[814,1],"17":[486,12,365,12,133]},"inputSourceMap":{"version":3,"file":"/Users/han/code/cpsc310/c1/project_team123/src/utils/QueryUtils.ts","sources":["/Users/han/code/cpsc310/c1/project_team123/src/utils/QueryUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import Decimal from \"decimal.js\";\nimport {ApplyRule, ApplyToken, Sort} from \"../models/IQuery\";\nimport {InsightDatasetKind, InsightError} from \"../controller/IInsightFacade\";\n\n/**\n * Validates if the given key matches the expected fields based on the dataset kind.\n * @param {string | undefined} key - The key to be validated.\n * @param {InsightDatasetKind | undefined} kind - The kind of dataset being considered.\n * @throws {InsightError} If key or kind is undefined, or if the key does not match the dataset kind.\n */\nexport function validateKeyMatchesKind(key: string | undefined, kind: InsightDatasetKind | undefined): void {\n\tconst SectionFields = [\"avg\", \"pass\", \"fail\", \"audit\", \"year\", \"dept\", \"id\", \"instructor\", \"title\", \"uuid\"];\n\tconst RoomFields = [\n\t\t\"lat\",\n\t\t\"lon\",\n\t\t\"seats\",\n\t\t\"fullname\",\n\t\t\"shortname\",\n\t\t\"number\",\n\t\t\"name\",\n\t\t\"address\",\n\t\t\"type\",\n\t\t\"furniture\",\n\t\t\"href\",\n\t];\n\n\t// Handle undefined key or kind cases\n\tif (key === undefined || kind === undefined) {\n\t\tconst errorMessage =\n\t\t\tkey === undefined ? \"Key undefined when validating match with dataset kind.\" : \"Dataset has no kind set.\";\n\t\tthrow new InsightError(`Fatal error. ${errorMessage}`);\n\t}\n\t// Validate key against dataset kind\n\tconst field = key.split(\"_\")[1];\n\tif (\n\t\t(kind === InsightDatasetKind.Sections && !SectionFields.includes(field)) ||\n\t\t(kind === InsightDatasetKind.Rooms && !RoomFields.includes(field))\n\t) {\n\t\tthrow new InsightError(`Invalid key: ${key}`);\n\t}\n}\n\n/**\n * Orders the given entries based on a specified key in ascending order.\n * @param {any[]} entries - The array of entries to be sorted.\n * @param {string} key - The key by which entries should be sorted.\n * @param {InsightDatasetKind | undefined} kind - The kind of dataset being considered.\n */\nexport function orderEntriesByString(entries: any[], key: string, kind: InsightDatasetKind | undefined): void {\n\tlet orderKey = key;\n\n\t// Extract the actual field name if the key is prefixed with dataset type\n\tif (orderKey.includes(\"_\")) {\n\t\tvalidateKeyMatchesKind(orderKey, kind);\n\t\torderKey = orderKey.split(\"_\")[1];\n\t}\n\n\t// Sort entries\n\tentries.sort((a, b) => (a[orderKey] < b[orderKey] ? -1 : a[orderKey] > b[orderKey] ? 1 : 0));\n}\n\n/**\n * Orders the given entries based on the provided sort object.\n * @param {any[]} entries - The array of entries to be sorted.\n * @param {Sort} orderObject - The sort object containing direction and keys to order by.\n * @param {InsightDatasetKind | undefined} kind - The kind of dataset being considered.\n */\nexport function orderEntriesBySortObject(\n\tentries: any[],\n\torderObject: Sort,\n\tkind: InsightDatasetKind | undefined\n): void {\n\tentries.sort((a, b) => {\n\t\tfor (let key of orderObject.keys) {\n\t\t\tlet orderKey = key;\n\n\t\t\t// Extract the actual field name if the key is prefixed with dataset type\n\t\t\tif (key.includes(\"_\")) {\n\t\t\t\tvalidateKeyMatchesKind(orderKey, kind);\n\t\t\t\torderKey = key.split(\"_\")[1];\n\t\t\t}\n\n\t\t\t// Compare values and return based on sort direction\n\t\t\tif (a[orderKey] !== b[orderKey]) {\n\t\t\t\treturn a[orderKey] < b[orderKey]\n\t\t\t\t\t? orderObject.dir === \"UP\"\n\t\t\t\t\t\t? -1\n\t\t\t\t\t\t: 1\n\t\t\t\t\t: orderObject.dir === \"UP\"\n\t\t\t\t\t? 1\n\t\t\t\t\t: -1;\n\t\t\t}\n\t\t}\n\t\t// If entries are equal for all keys, they are considered the same\n\t\treturn 0;\n\t});\n}\n\n/**\n * Applies the provided rules on the sections and populates the result object.\n * @param {any[]} sections - The array of sections to apply the rules on.\n * @param {any} result - The result object to populate.\n * @param {ApplyRule[] | undefined} rules - The array of rules to apply.\n * @param {InsightDatasetKind | undefined} kind - The kind of dataset being considered.\n */\nexport function applyRules(\n\tsections: any[],\n\tresult: any,\n\trules: ApplyRule[] | undefined,\n\tkind: InsightDatasetKind | undefined\n): void {\n\tif (rules !== undefined) {\n\t\trules.forEach((applyRule) => {\n\t\t\tconst applyKey = Object.keys(applyRule)[0];\n\t\t\tconst applyToken = Object.keys(applyRule[applyKey])[0] as ApplyToken;\n\t\t\tvalidateKeyMatchesKind(applyRule[applyKey][applyToken], kind);\n\t\t\tconst field = applyRule[applyKey][applyToken]?.split(\"_\")[1];\n\n\n\t\t\t// Apply the rule based on its token\n\t\t\tswitch (applyToken) {\n\t\t\t\tcase \"MAX\": {\n\t\t\t\t\tresult[applyKey] = Math.max(...sections.map((entry) => entry[field as string] as number));\n\t\t\t\t\tbreak;\n                }\n\t\t\t\tcase \"MIN\": {\n\t\t\t\t\tresult[applyKey] = Math.min(...sections.map((entry) => entry[field as string] as number));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"AVG\": {\n\t\t\t\t\tlet total = new Decimal(0);\n\t\t\t\t\tsections.forEach((entry) => (total = total.add(new Decimal(entry[field as string] as number))));\n\t\t\t\t\tresult[applyKey] = Number((total.toNumber() / sections.length).toFixed(2));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"SUM\": {\n\t\t\t\t\tconst sum = sections.reduce(\n\t\t\t\t\t\t(acc, entry) => new Decimal(acc).add(new Decimal(entry[field as string] as number)).toNumber(),\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t\tresult[applyKey] = Number(sum.toFixed(2));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"COUNT\": {\n\t\t\t\t\tresult[applyKey] = new Set(sections.map((entry) => entry[field as string])).size;\n\t\t\t\t\tbreak;\n                }\n\t\t\t}\n\t\t});\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"356fbdb301dc0d93e86669c823233adff77b6d54","contentHash":"9b09fc32c58e5cd4f2e6fe359d5a3bac455efaaa945e12755622bbe5612dfaca"}}